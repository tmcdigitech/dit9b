<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>9 Digital Tech on TMC - 9 Digital Tech Semester 2</title><link>https://tmcdigitech.github.io/dit9b/</link><description>Recent content in 9 Digital Tech on TMC - 9 Digital Tech Semester 2</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit9b/index.xml" rel="self" type="application/rss+xml"/><item><title>1: Create project</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/01createProject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/01createProject/</guid><description>Make sure you choose 2D for your template. The new project may take a few minutes to create.</description></item><item><title>Sequence</title><link>https://tmcdigitech.github.io/dit9b/assessment/progCheckpoint/sequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/assessment/progCheckpoint/sequence/</guid><description>from The Computing Zone
1. Three in, three out Write a program that will allow a user to enter their name (string), their age (integer) and their favourite TV program (string). The program will then display the information entered and some additional text on separate lines. An example of the input and output from the program is shown below. What is your name? &amp;gt; Lister What is your age? &amp;gt; 39 What is your favourite TV program?</description></item><item><title>2: Get some assets</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/02getSomeAssets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/02getSomeAssets/</guid><description>We need some objects to go in our game. In this example, we&amp;rsquo;ll use assets from kenney.nl&amp;rsquo;s asset pack Space Shooter Redux.
We need:
ships (us and them) asteroids (we&amp;rsquo;re going large, medium, small) powerups/tokens laser blast explosions Here are the assets we&amp;rsquo;ll use:
Download your assets, and then drag them into the assets panel at the bottom of the Unity screen.</description></item><item><title>Selection</title><link>https://tmcdigitech.github.io/dit9b/assessment/progCheckpoint/selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/assessment/progCheckpoint/selection/</guid><description>from The Computing Zone
9. Advice please Write a program that asks the user if they would like some advice. If they enter Y, provide them with an amusing message. Would you like some advice? &amp;gt; Y Always know where your towel is. Would you like some advice? &amp;gt; N 10. Darts During a game of darts, the highest score that can be achieved in a single turn is 180. The lowest is 0.</description></item><item><title>3: Understand the Unity UI</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/03unityInterface/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/03unityInterface/</guid><description>Drag the sprite (image) for your player ship into the Scene to create the GameObject for your player.
The white rectangle shows what is visible on the main camera, whose location is shown by the camera image in the centre of the scene. The main camera is what will appear on our screen, so for our basic example, anything inside that white rectangle will be visible on screen, and anything outside will not be.</description></item><item><title>Iteration</title><link>https://tmcdigitech.github.io/dit9b/assessment/progCheckpoint/iteration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/assessment/progCheckpoint/iteration/</guid><description>from The Computing Zone
13. Lines cheat A naughty pupil has been given lines to copy as a punishment from their Computing teacher. The have been asked to type out “I must not behave like muppet in class” 20 times. Write a program that asks a pupil to enter a sentence. The same sentence should then be displayed 20 times. What sentence would you like copied? &amp;gt; I must not behave like a muppet in class.</description></item><item><title>4: Use the inspector</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/04usingTheInspector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/04usingTheInspector/</guid><description>The inspector panel shows information about a selected GameObject, including all its components.
You can adjust values in the inspector by:
typing values directly in an input field dragging up/down or left/right on input field&amp;rsquo;s text label, dragging an object from the hierarchy or assets panes onto a reference field (the fields with a little &amp;ldquo;target&amp;rdquo; at the right) The dragging a label option can be really handy for working out approximately what the value for some property should be, before choosing a specific value for it.</description></item><item><title>5: Add components</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/05addingComponents/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/05addingComponents/</guid><description>Using the Add Component button, add a Rigidbody2D and a BoxCollider2D component:
Physics 2D &amp;gt; Rigidbody 2D to add the Rigidbody2D component, and Physics 2D &amp;gt; BoxCollider 2D to add a BoxCollider2D component. The Rigidbody component exposes the object to the Physics engine, allowing forces to operate on it. If you press the play button above your scene now, you will see that the force of gravity causes your ship to fall off the bottom of the screen.</description></item><item><title>6: Get the player moving</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/06gettingMoving/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/06gettingMoving/</guid><description>Disable gravity At the moment our player moves, but only because of gravity, and there isn&amp;rsquo;t a lot of gravity in space. So let&amp;rsquo;s turn that off. In the menu bar, go to Edit &amp;gt; Project Settings, choose Physics 2D from the sidebar, and set the Y value of Gravity to zero (0).
Create player script With your player&amp;rsquo;s game object selected, from the inspector choose Add component. In the search field, type &amp;ldquo;Player&amp;rdquo;, and then choose New script, and then Create and Add.</description></item><item><title>7: Add asteroids</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/07asteroids/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/07asteroids/</guid><description>Let&amp;rsquo;s add some asteroids. Since asteroids are all broadly alike, it&amp;rsquo;d be great if there was a way to set up one up with all the components and scripts we need and then just clone it, and there is: prefabs!
Drag one the large meteor image into the scene, and rename it asteroidLarge. In the tag menu, select &amp;ldquo;Add tag&amp;rdquo;. Under &amp;ldquo;tags&amp;rdquo;, it will say &amp;ldquo;List is empty&amp;rdquo;. Click on the + at the right end of that box, and enter &amp;ldquo;Asteroid&amp;rdquo; and hit Save.</description></item><item><title>8: Wrap the screen</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/08screenWrapping.md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/08screenWrapping.md/</guid><description>Player Asteroids At the moment, once an asteroid (or your ship) disappears off the edge of the screen, it will continue moving forever and you&amp;rsquo;ll likely never find it again. In some games you might choose to attach the camera to the player so you can move around and keep the player on the screen, but in this case we&amp;rsquo;re going to wrap the screen: when the player moves off one edge, they&amp;rsquo;ll reappear on the other.</description></item><item><title>9: Move asteroids</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/09randomMovement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/09randomMovement/</guid><description>Having the asteroids hang in space as they do looks a litle unrealistic, so let&amp;rsquo;s add some code to the Start() method to give them some initial movement.
The first part chooses a random angle from 0 to 360, and sets the z-axis rotation to that angle.
The second part chooses a random speed from 0.5 to 2. It then creates a vector pointing up (positive-y) which is the natural forward direction, and then rotates that vector to match the rotation of the asteroid.</description></item><item><title>10: Make a gun</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/10gun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/10gun/</guid><description>Let&amp;rsquo;s make a gun. Our gun will be slightly odd, in that it won&amp;rsquo;t be attached directly to the ship. Instead, the thing we&amp;rsquo;re going to build will be invisible, and sit just in front of the ship. When we press the fire button (left Ctrl by default), our player will generate a laser blast at the location of the gun, which will then travel forward at speed.
We need to make sure that the gun object is a &amp;ldquo;child&amp;rdquo; object of the player, so that the gun is attached to the player and moves as the player moves.</description></item><item><title>Basic input and output</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/inputOutput/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/inputOutput/</guid><description>Output Python print(&amp;#34;Some text&amp;#34;) C# Console.WriteLine(&amp;#34;Some text&amp;#34;) To print to the console in Python, we use the print() function. In C#, console functions are part of the Console class, and the equivalent to Python&amp;rsquo;s print function is Console.WriteLine(). If you don&amp;rsquo;t want it to automatically add a line break, you can use the Console.Write() function.
Input Python response = input(&amp;#34;What is your name? &amp;#34;) C# Console.WriteLine(&amp;#34;What is your name? &amp;#34;) response = Console.</description></item><item><title>UFO assets</title><link>https://tmcdigitech.github.io/dit9b/basics/UFO/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/basics/UFO/</guid><description> Name Image UFO Alien</description></item><item><title>11: Make a laser blast</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/11laserBlastPrefab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/11laserBlastPrefab/</guid><description>We now need to make our laser blast. Grab the laser blast you chose (ours is green) and drag it into the scene to make a new game object. Call it &amp;ldquo;playerBlast&amp;rdquo;. As you did for the asteroids, make a tag called &amp;ldquo;LaserBlast&amp;rdquo; and tag your new playerBlast.
While we&amp;rsquo;re setting things up, go ahead and add a BoxCollider2D and a Rigidbody2D.
Now turn your playerBlast into a prefab (drag it from the hierarchy down into the Assets panel).</description></item><item><title>12: Handle blast collisions</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/12laserCollisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/12laserCollisions/</guid><description>You can see you can shoot laser blasts, and they collide with the asteroids, causing them to move. They also then bounce off in a weird way that makes them look more like shards of coloured ice than laser blasts!
Firstly, go to your playerBlast prefab (in the Assets panel). In its collider component, turn on the &amp;ldquo;Is Trigger&amp;rdquo; option. This turns the blast from a physical object that collides into more of a &amp;ldquo;magic region&amp;rdquo; that things can pass through.</description></item><item><title>13: Limit laser life</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/13limitLaserLife/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/13limitLaserLife/</guid><description>If you&amp;rsquo;re not a particularly accurate shot, those laser blasts you fire will continue to travel for ever, until the scene is unloaded (either due to changing the scene or quitting the game). This feels untidy and, in a big game, can cause resources to be tied up and used on things which aren&amp;rsquo;t relevant anymore. Let&amp;rsquo;s use the same idea used to handle screen wrapping to destroy the laser blasts once they reach the edge of the screen.</description></item><item><title>14: Make debris</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/14betterCollisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/14betterCollisions/</guid><description>Here we&amp;rsquo;re going to implement &amp;ldquo;debris&amp;rdquo;. When an asteroid is destroyed, it can break into smaller pieces, which can also be destroyed (and also potentially break into pieces). In practice, we will use a combination of Destroy() and Instantiate() to remove the old asteroid and create three new ones in its place. One is in the direction of the original asteroid, and the other two are mirrored at a random angle from that direction.</description></item><item><title>Explicit typing</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/types/</guid><description>Computers store all information as sequences of numbers, and different kinds of information are encoded using different methods. These different kinds of information are known as types, and they exist in all programming languages.
The Python interpreter allows the programmer to ignore many of the issues of typing much of the time, as it can infer a lot from the code. But you would have had to convert numbers into text using the str() function, and this is an example of type conversion.</description></item><item><title>Player movement</title><link>https://tmcdigitech.github.io/dit9b/basics/playerMovement/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/basics/playerMovement/</guid><description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { public float accel; private Rigidbody2D rb; // Start is called before the first frame update void Start() { rb = GetComponent&amp;lt;Rigidbody2D&amp;gt;(); } // Update is called once per frame void Update() { float inX = Input.</description></item><item><title>if statements</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/if/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/if/</guid><description> Link to view video at TMC
Basic if Python if condition: statements regularFlow C# if( condition ){ statements; } regularFlow; if/else Python if condition: statements else: statements regularFlow C# if( condition ){ statements; }else{ statements; } regularFlow; chained if Python if condition: statements elif otherCondition: statements else: statements regularFlow C# if( condition ){ statements; }else if( otherCondition ){ statements; }else{ statements; } regularFlow;</description></item><item><title>while loops</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/while/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/while/</guid><description> Link to view video at TMC
Python while condition: statements regularFlow C# while( condition ){ statements; } regularFlow;</description></item><item><title>for loops</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/for/</guid><description>Link to view video at TMC
Python In Python, the range() function is commonly used to make a loop that counts through some number:
range(4) will give the numbers 0, 1, 2, 3 (i.e. 0 to not-quite 4); range(1,4) will give the numbers 1, 2, 3 (i.e. 1 to not-quite 4); range(1,4,2) will give the numbers 1, 3 (i.e. 1 to not-quite 4, increasing by 2). C# C# inherits its truly disgusting for loop layout from C.</description></item><item><title>Assets</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/assets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/assets/</guid><description>Alt-click to download:
Explosion 1 Explosion 2</description></item><item><title/><link>https://tmcdigitech.github.io/dit9b/pyToCs/example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/example/</guid><description/></item><item><title>2. Deep Space Game</title><link>https://tmcdigitech.github.io/dit9b/assessment/deepSpace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/assessment/deepSpace/</guid><description/></item><item><title>3: 2D Game Design Project</title><link>https://tmcdigitech.github.io/dit9b/assessment/planning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/assessment/planning/</guid><description/></item><item><title>Asteroid.cs</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/asteroid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/asteroid/</guid><description>using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { public GameObject explosionTemplate; // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); if( screenPos.x &amp;gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x &amp;lt; -margin ){ //off left, move to right screenPos.</description></item><item><title>Components</title><link>https://tmcdigitech.github.io/dit9b/glossary/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/glossary/components/</guid><description>All game objects have one or more components.
Here are the ones you&amp;rsquo;re most likely to encounter.
Name This is not actually a component, but it lives at the top of the inspector panel, above all the components. Here you can give your object a meaningful name as well as attach a tag, which is useful for identifying things during collisions.
Transform All GameObjects have a transform component, which manages the position, rotation and scale of the object in the scene.</description></item><item><title>Hierarchy</title><link>https://tmcdigitech.github.io/dit9b/glossary/hierarchy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/glossary/hierarchy/</guid><description/></item><item><title>Installation</title><link>https://tmcdigitech.github.io/dit9b/setup/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/setup/installation/</guid><description>You will need three main tools for developing in Unity, and all can be found on the TMC Company Portal.
Unity Hub Unity Hub is responsible for managing licences and which version of Unity (if you have more than one) is associated with which project. You will start your workflow in Unity Hub, where you will select which project you&amp;rsquo;ll work on, or start a new one.
Unity Unity (also referred to as the Unity Editor) is the heart of things.</description></item><item><title>LaserBlast.cs</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/laserBlast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/laserBlast/</guid><description>using System.Collections; using System.Collections.Generic; using UnityEngine; public class LaserBlast : MonoBehaviour { // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); if( screenPos.x &amp;gt; Screen.width+margin || screenPos.x &amp;lt; -margin || screenPos.y &amp;gt; Screen.height+margin || screenPos.y &amp;lt; -margin ){ Destroy(this); } Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.</description></item><item><title>Player.cs</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/player/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/player/</guid><description>using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { public float rotSpeed; public float linSpeed; private Rigidbody2D rb; public GameObject projectileTemplate; // Start is called before the first frame update void Start() { rb = GetComponent&amp;lt;Rigidbody2D&amp;gt;(); } // Update is called once per frame void Update() { //Update rotation rb.MoveRotation(rb.rotation - Input.GetAxis(&amp;#34;Horizontal&amp;#34;) * rotSpeed * Time.deltaTime); //Update velocity Vector3 pos = transform.position; float y = Input.GetAxis(&amp;#34;Vertical&amp;#34;) * linSpeed * Time.</description></item><item><title>rock.cs</title><link>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/rock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/deepSpace/finishedScripts/rock/</guid><description>using System.Collections; using System.Collections.Generic; using UnityEngine; public class Rock : MonoBehaviour { private Rigidbody2D rb; public GameObject explosionTemplate; public GameObject debrisTemplate; private float initializationTime; // Start is called before the first frame update void Start() { rb = GetComponent&amp;lt;Rigidbody2D&amp;gt;(); initializationTime = Time.timeSinceLevelLoad; //Choose a random angle float angle = Random.Range(0f, 360f); this.transform.rotation = Quaternion.Euler(0, 0, angle); //Choose a random speed float speed = Random.Range(0f, 5f); Vector3 s = new Vector3(0, speed, 0); rb.</description></item><item><title>Walkthrough videos</title><link>https://tmcdigitech.github.io/dit9b/basics/videos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/basics/videos/</guid><description>Here is a series of short videos which will get you started building 2D games in Unity.
Starting a project
Unity Hub starting a new project Adding objects and making them interact
adding objects sprites Rigidbody2D colliders User input; complex objects, and lots of them
responding to user input compound objects prefabs constraints Collecting objects
tagging objects collisions</description></item></channel></rss>