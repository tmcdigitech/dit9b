<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>9 Digital Tech on TMC - 9 Digital Tech Semester 1</title><link>https://tmcdigitech.github.io/dit9a/</link><description>Recent content in 9 Digital Tech on TMC - 9 Digital Tech Semester 1</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit9a/index.xml" rel="self" type="application/rss+xml"/><item><title>Gem Catcher</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/gemCatcher/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/gemCatcher/</guid><description> First program update() Adding a gem Collision and Random Keeping Score Mouse and Events Game Over Challenges</description></item><item><title>Sequence</title><link>https://tmcdigitech.github.io/dit9a/checkpoint1/sequence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/checkpoint1/sequence/</guid><description>from The Computing Zone
To be successful Follow this link to hand in your files.
You will need to save each of the tasks in this set in its own file, with a simple naming system:
1. Three in, three out should be in a file named ex1.py, 2. Name swapper should be in a file named ex2.py and so on.
You will be submitting these files to a system which will mark them automatically.</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit9a/gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gettingStarted/software/</guid><description>For this subject, you will need to install Python and Visual Studio Code from the Company Portal.
Open the Company Portal:
Find and install Python:
Find and install Visual Studio Code (NOT Visual Studio Community):
Install the Python extension for Visual Studio Code:</description></item><item><title>More routes</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/02moreRoutes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/02moreRoutes/</guid><description> main.py from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; Go to &amp;lt;a href=&amp;#34;/other&amp;#34;&amp;gt;the other page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; @route(&amp;#39;/other&amp;#39;) def other_page(): return &amp;#34;&amp;#34;&amp;#34; &amp;lt;h1&amp;gt;The other page&amp;lt;/h1&amp;gt; Go back to &amp;lt;a href=&amp;#34;/&amp;#34;&amp;gt;the home page&amp;lt;/a&amp;gt;. &amp;#34;&amp;#34;&amp;#34; run(reloader=True, debug=True)</description></item><item><title>Ninja Runner</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/ninjaRunner/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/ninjaRunner/</guid><description> Infinite Runner Background Ninja Jumping Obstacles Keeping Score Game Over Challenges and Bugs</description></item><item><title>Selection</title><link>https://tmcdigitech.github.io/dit9a/checkpoint2/selection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/checkpoint2/selection/</guid><description>from The Computing Zone
To be successful Follow this link to hand in your files.
You will need to save each of the tasks in this set in its own file, with a simple naming system:
9. Advice please should be in a file named ex9.py, 10. Darts should be in a file named ex10.py and so on.
You will be submitting these files to a system which will mark them automatically.</description></item><item><title>04 Templates</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/04templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/04templates/</guid><description>This example shows how a template can be used to generate lots of individual pages with a common structure.
main.py</description></item><item><title>Full HTML Example</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/03fullHtmlExample/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/03fullHtmlExample/</guid><description>This example is a complete HTML page.
base.html &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- Required meta tags --&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;&amp;gt; &amp;lt;!-- Bootstrap CSS --&amp;gt; &amp;lt;link href=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; integrity=&amp;#34;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Hello, world!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt; &amp;lt;!-- Bootstrap Bundle with Popper --&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js&amp;#34; integrity=&amp;#34;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;</description></item><item><title>Iteration</title><link>https://tmcdigitech.github.io/dit9a/checkpoint3/iteration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/checkpoint3/iteration/</guid><description>from The Computing Zone
To be successful Follow this link to hand in your files.
You will need to save each of the tasks in this set in its own file, with a simple naming system:
13. Lines cheat should be in a file named ex13.py, 14. Cricket over should be in a file named ex14.py and so on.
You will be submitting these files to a system which will mark them automatically.</description></item><item><title>Tanks</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/tankGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/tankGame/</guid><description> Battle City 1985 Tank Moving the tank Background and Walls Randomizing the Walls Blocking Movements Tank Cannon Destroying Walls One Enemy Enemy Bullets Many Enemies Winning and Losing</description></item><item><title>Chase game</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/chaseGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/chaseGame/</guid><description>Chase game</description></item><item><title>Maze game</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/mazeGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/mazeGame/</guid><description>Maze game
Introduces tile maps</description></item><item><title>Shooting game</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/shootingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/shootingGame/</guid><description>Shooting game</description></item><item><title>Racing game</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/racingGame/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/racingGame/</guid><description>Racing game</description></item><item><title>What is state?</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02state/stateWhatIs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02state/stateWhatIs/</guid><description>What is state? Imagine you are enjoying a particularly engaging session of Uno with some friends, and by a peculiar set of circumstances you are required to pack up the game back into its pack, but you and your friends want to be able to resume exactly where you are when you next meet. What would you have to record so that you can restore the game exactly as it is right now?</description></item><item><title>Reacting to and changing state</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02state/stateReacting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02state/stateReacting/</guid><description>In all computer games, the game proceeds a teeny bit at a time, with each of the agents in the game making decisions about what to do next based on the current state, which then changes the game state, and then the agents all make a new set of decisions, and the game state changes again. From outside this can appear as a smooth, seamless and continuous process, but it is always made of little, discrete moves.</description></item><item><title>Text-based quiz games</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/textBasedGames/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/textBasedGames/</guid><description>from Coding Games with Pygame Zero &amp;amp; Python, by Richard Smith
These programs can be entered using any text editor, but I suggest using the Mu editor because it comes with Python, Pygame Zero and other libraries all pre-installed in one easy download.
3.1. Hello, world The traditional first program used to make sure Python is working and that we can run programs.
If using the Mu editor:
Click the mode button and make sure the mode is set to Python3.</description></item><item><title>Vertical shooter</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/verticalShooter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/verticalShooter/</guid><description> Twin Bee</description></item><item><title>Drawing graphics</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/graphics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/graphics/</guid><description>adapted from Coding Games with Pygame Zero &amp;amp; Python, by Richard Smith
To create graphics for our games we will use the Pygame Zero library. You will find the documentation on the website useful!
The smallest square that can be displayed on a monitor is called a pixel. This diagram shows a close-up view of a window that is 40 pixels wide and 40 pixels high. At normal size you will not see the grid lines.</description></item><item><title>Problems with state</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02state/stateProblems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02state/stateProblems/</guid><description>Keep it simple Broadly speaking, the more state your program has, the more complex it is, and thus the more opportunities there are for mistakes. This should encourage us to look for a solution with as little state information as possible. As a simple example, in a fighting game, it is important to know whether a character is alive or dead, and how much health they have. So you might think to have an integer to keep track of health, and a couple of boolean flags to keep track of the character&amp;rsquo;s life status:</description></item><item><title>Drawing graphics (slides)</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/graphicsSlides/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/graphicsSlides/</guid><description>Drawing graphics adapted from Coding Games with Pygame Zero &amp;amp; Python, by Richard Smith
The smallest square that can be displayed on a monitor is called a pixel. This diagram shows a close-up view of a window that is 40 pixels wide and 40 pixels high. At normal size you will not see the grid lines.
We can refer to any pixel by giving two co-ordinates,
(x, y)
Make sure you understand co-ordinates before moving on because everything we do in Pygame Zero will use it.</description></item><item><title>Arcade games</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/arcade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02basics/arcade/</guid><description>adapted from Coding Games with Pygame Zero &amp;amp; Python, by Richard Smith
Keyboard input The alien moves when you press the cursor keys.
Program 4.5 Keyboard input
1 2 3 4 5 6 7 8 9 10 11 12 alien = Actor(&amp;#39;alien&amp;#39;) alien.pos = (0, 50) def draw(): screen.clear() alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 Exercise Make the alien move up and down as well as left and right.</description></item><item><title>The update/draw cycle</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/02state/updateDrawCycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02state/updateDrawCycle/</guid><description>In Pygame Zero, as with most game engines, the code that manages the game state is separate from the code that handles the display. In Pygame Zero, there are two main functions:
update(), which responds to inputs and manages the game state, and draw(), which coordinates updating the screen to match the game state. stateDiagram-v2 direction LR [*] --> update() update() --> draw() draw() --> update() Where possible, these two functions will be run, update then draw, update then draw, 60 times per second.</description></item><item><title>More walk-throughs</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/moreTutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/03walkthroughs/moreTutorials/</guid><description>Simple Game Tutorials for Python and Pygame Zero 1.2</description></item><item><title/><link>https://tmcdigitech.github.io/dit9a/gameDesign/02state/maintainingState/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/02state/maintainingState/</guid><description/></item><item><title>01 Hello, World!</title><link>https://tmcdigitech.github.io/dit9a/bottleBasics/01helloWorld/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/bottleBasics/01helloWorld/</guid><description>Make a new file named hello.py and enter the following code: 1 2 3 4 5 6 7 from bottle import route, run @route(&amp;#39;/&amp;#39;) def index(): return &amp;#34;Hello, world!&amp;#34; run(reloader=True, debug=True) To run your file, you should be able to press the play button in the top right of the window. Failing that, from the file explorer on the left, right click on your file and choose Open in Integrated Terminal.</description></item><item><title>bottle.run()</title><link>https://tmcdigitech.github.io/dit9a/glossary/bottleRun/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/glossary/bottleRun/</guid><description>run(reloader=True, debug=True) You can just say run(), and it will begin using a set of defaults, but we have customised the server slightly. The reloader flag tells the server to restart every time we change a code file, which saves us from turning it off and on again every time we modify our code. Very handy for development! The debug flag does a something thing for templates.
There are a lot of other flags you can use, but two that you might find handy are:</description></item><item><title>Enchanted Scepters</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/EnchantedScepters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/EnchantedScepters/</guid><description>by Silicon Beach Software (1984)
In this part-illustrated, part-text adventure, you are tasked with recovering four magical sceptres (earth, fire, wind and water, of course) to save your kingdom from invasion.</description></item><item><title>Iago</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/Iago/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/Iago/</guid><description>by David Reed (1984)
Iago was a very early Othello/Reversi game, which offered excellent gameplay. You could play against a friend or a computer with three levels of difficulty, on three different sizes of board.
It even has a special feature to hide the game if you are playing it at work and your boss is coming&amp;hellip;</description></item><item><title>Phrase Craze</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/PhraseCraze/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/PhraseCraze/</guid><description>by Brad Pettit (1986)
Borrowing heavily from the TV game show Wheel of Fortune, Phrase Craze offers up to four players the chance to relive the thrill of being on the set, complete with game board, wheel, and charming host. You could also modify the PhraseFile to create your own puzzles.</description></item><item><title>Software</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/01gettingStarted/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/01gettingStarted/software/</guid><description>To develop games using Pygame Zero, you have two main options:
use Mu use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.
After you have been writing code for a while, you may find that a standard Python environment and a &amp;ldquo;full&amp;rdquo; text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.</description></item><item><title>Strings</title><link>https://tmcdigitech.github.io/dit9a/reference/strings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/reference/strings/</guid><description>adapted from Medium.com
Let us see the different operations that can be performed on the below string.
word = &amp;#39;Sample&amp;#39; len(word) # 6 +---+---+---+---+---+---+ | S | a | m | p | l | e | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 1 Concatenation Join a string with another string
word = &amp;#39;Sample&amp;#39; word + &amp;#39; &amp;#39; + &amp;#39;trick&amp;#39; # &amp;#39;Sample trick&amp;#39; 2 Indexed Access of Strings A string in a python can be indexed to perform operations on the string.</description></item><item><title>Structuring your files</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/01gettingStarted/fileStructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/01gettingStarted/fileStructure/</guid><description>Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).
Digital Tech/ │ ├── firstGame/ │ └── game.py │ ├── secondGame/ │ └── game.py │ ├── thirdGame/ │ └── game.py │ └── fourthGame/ └── game.py Within each of those folders, there will be python file with your game code in it, but there may well be other files and folders as well.</description></item><item><title>StuntCopter</title><link>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/StuntCopter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/gameDesign/inspiration/StuntCopter/</guid><description>by Duane Blehm (1986)
Part of the genius of this game is how simple it is. Your aim is to drop people out of a helicopter onto the cart, carefully avoiding the rider and the horse. The further up you drop from, the more points you get. See what happens when you drop someone through the clouds&amp;hellip;
If you go to Options &amp;gt; OffScreen in the menu, you can also see the complete sprite sheet for the game; a nice touch.</description></item><item><title>URLs</title><link>https://tmcdigitech.github.io/dit9a/glossary/URLs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9a/glossary/URLs/</guid><description>\[\overbrace{\text{https}}^{\text{scheme}}\text{://} \overbrace{\text{tmcdigitech.github.io}}^{\text{address}} \text{:}\overbrace{\text{8080}}^{\text{port}} \overbrace{\text{/dit10a/glossary/URLs/}}^{\text{path/endpoint}}\] The scheme tells the browser how it will connect to the server. This is typically https, but could also be http, ftp, mailto, or any number of others.
The address tells the browser where to send the request, i.e. which address. Addresses can be in the form of domain names like google.com, or IP addresses like 192.168.0.1.
google.com is like saying Thomas More College. 192.168.0.1 is like saying 35 Amsterdam Crescent, Salisbury Downs.</description></item></channel></rss>