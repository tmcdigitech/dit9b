[{"id":0,"href":"/dit9a/relief/","title":"RELIEF LESSON","parent":"9 Digital Tech","content":"Thursday Week 5 (2-June-2022)\nIn preparation for making your own game, today you should work through this set of short videos which will make a simple game from scratch. Your game may adapt and extend this one, or it might be very different, but there will almost certainly be things of use to you.\nYou can use Mu Editor or Visual Studio Code. If using Visual Studio Code, you need to start each program with:\nimport pgzrun and finish it with\npgzrun.go() If you have trouble with this, use Mu Editor instead.\nIf you already have Mu installed, still go to the Company Portal and check that you have the most up to date version. If you can press the Install button, there is a newer version.\nNote that you had an older version before, you may end up with two copies installed, an old one called Mu, and a new one called Mu Editor. Use the one called Mu Editor.\n"},{"id":1,"href":"/dit9a/gameDesign/","title":"Game Design","parent":"9 Digital Tech","content":""},{"id":2,"href":"/dit9a/gameDesign/03walkthroughs/gemCatcher/","title":"Gem Catcher","parent":"Walk-throughs","content":" First program update() Adding a gem Collision and Random Keeping Score Mouse and Events Game Over Challenges "},{"id":3,"href":"/dit9a/gettingStarted/","title":"Getting Started","parent":"9 Digital Tech","content":""},{"id":4,"href":"/dit9a/checkpoint1/sequence/","title":"Sequence","parent":"Task 1 - Python Checkpoint","content":"from The Computing Zone\nTo be successful Follow this link to hand in your files.\nYou will need to save each of the tasks in this set in its own file, with a simple naming system:\n1. Three in, three out should be in a file named ex1.py, 2. Name swapper should be in a file named ex2.py and so on.\nYou will be submitting these files to a system which will mark them automatically. Since they\u0026rsquo;ll be marked by a computer, and computers are terminally stupid, you will need to make sure that your files are labelled correctly, or the computer will assume you haven\u0026rsquo;t done that particular exercise. You will also need to make sure your output exactly matches the examples, down to capitalisation, spelling, line breaks and spaces.\nYou need to make sure each of your exercises uses this code layout. Replace the included example (which is exercise 2) with your code.\ndef ex(input,print): # your program goes below here # vvvvvvvvvvvvvvvvvvvvvvvvvvvv print(\u0026#34;What is your first name?\u0026#34;) fname = input(\u0026#34;\u0026gt; \u0026#34;) print(\u0026#34;What is your surname?\u0026#34;) sname = input(\u0026#34;\u0026gt; \u0026#34;) print(f\u0026#34;{sname} {fname}\u0026#34;) # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # your program goes above here if __name__ == \u0026#34;__main__\u0026#34;: ex(input,print) 1. Three in, three out Write a program that will allow a user to enter their name (string), their age (integer) and their favourite TV program (string). The program will then display the information entered and some additional text on separate lines. An example of the input and output from the program is shown below. What is your name? \u0026gt; Lister What is your age? \u0026gt; 39 What is your favourite TV program? \u0026gt; Red Dwarf Lister is 39 years old and likes Red Dwarf 2. Name swapper Write a program that will ask the user to type in their first name and surname. The program will then display the two names in reverse order. What is your first name? \u0026gt; David What is your surname? \u0026gt; Tennant Tennant David 3. Three in, three out (formatted) Now edit program 1 so that the information entered is displayed differently as shown in the output box below. Note - your output will now have to display variables and text together. What is your name? \u0026gt; Lister What is your age? \u0026gt; 39 What is your favourite TV program? \u0026gt; Red Dwarf Lister 39 Likes watching Red Dwarf 4. Area of a rectangle Ask your user to enter the length and width of a rectangle. Your program should calculate the area of the rectangle (length*width) and display the result with a suitable message. Please enter the following values in cm. Please enter the length of the rectangle. \u0026gt; 12 Please enter the width of the rectangle. \u0026gt; 6 The area of the rectangle is: 72 square centimetres 5. Area of a circle Ask your user to enter the radius of a circle. Your program should use what they have entered to calculate the area of the circle (pi*radius*radius) and display the result. Please enter the following values in cm. Please enter the radius of the circle. \u0026gt; 16 The area of the circle is: 803.84 square centimetres 6. Number cruncher Write a program that inputs two individual integers between 0 and 9. The program should then combine the inputs to form a single number in a third variable. The program should show the equation of multiplying the three numbers together and the result, as shown in the example. Enter the first number (0-9). \u0026gt; 2 Enter the second number (0-9). \u0026gt; 3 2 x 3 x 23 = 138 7. Address formatter A program is required to format and store a users address in a single string. The user should be asked these questions:\nWhat is your house number? What is the name of your street? What suburb/town do you live in? What is your postcode?\nThe program will then combine the user\u0026rsquo;s answers in a single string, formatted as shown in the example. The program will display the string on the screen.\nWhat is your house number? \u0026gt; 13 What is the name of your street? \u0026gt; Aberlove Drive What suburb/town do you live in? \u0026gt; Buckhaven What is your postcode? \u0026gt; 4039 13 Aberlove Drive BUCKHAVEN 4039 8. Super smart name swapper (extension) Ask the user to enter their full name on one line, and display their name in reverse order. What is your full name? \u0026gt; David Tennant Tennant David "},{"id":5,"href":"/dit9a/gettingStarted/software/","title":"Software","parent":"Getting Started","content":"For this subject, you will need to install Python and Visual Studio Code from the Company Portal.\nOpen the Company Portal:\nFind and install Python:\nFind and install Visual Studio Code (NOT Visual Studio Community):\nInstall the Python extension for Visual Studio Code:\n"},{"id":6,"href":"/dit9a/bottleBasics/02moreRoutes/","title":"More routes","parent":"Bottle basics","content":" main.py from bottle import route, run @route(\u0026#39;/\u0026#39;) def index(): return \u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; Go to \u0026lt;a href=\u0026#34;/other\u0026#34;\u0026gt;the other page\u0026lt;/a\u0026gt;. \u0026#34;\u0026#34;\u0026#34; @route(\u0026#39;/other\u0026#39;) def other_page(): return \u0026#34;\u0026#34;\u0026#34; \u0026lt;h1\u0026gt;The other page\u0026lt;/h1\u0026gt; Go back to \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;the home page\u0026lt;/a\u0026gt;. \u0026#34;\u0026#34;\u0026#34; run(reloader=True, debug=True) "},{"id":7,"href":"/dit9a/gameDesign/03walkthroughs/ninjaRunner/","title":"Ninja Runner","parent":"Walk-throughs","content":" Infinite Runner Background Ninja Jumping Obstacles Keeping Score Game Over Challenges and Bugs "},{"id":8,"href":"/dit9a/checkpoint2/selection/","title":"Selection","parent":"Task 2 - Python Checkpoint","content":"from The Computing Zone\nTo be successful Follow this link to hand in your files.\nYou will need to save each of the tasks in this set in its own file, with a simple naming system:\n9. Advice please should be in a file named ex9.py, 10. Darts should be in a file named ex10.py and so on.\nYou will be submitting these files to a system which will mark them automatically. Since they\u0026rsquo;ll be marked by a computer, and computers are terminally stupid, you will need to make sure that your files are labelled correctly, or the computer will assume you haven\u0026rsquo;t done that particular exercise. You will also need to make sure your output exactly matches the examples, down to capitalisation, spelling, line breaks and spaces.\nYou need to make sure each of your exercises uses this code layout. Replace the included example (which is exercise 2 from the sequence section) with your code.\ndef ex(input,print): # your program goes below here # vvvvvvvvvvvvvvvvvvvvvvvvvvvv print(\u0026#34;What is your first name?\u0026#34;) fname = input(\u0026#34;\u0026gt; \u0026#34;) print(\u0026#34;What is your surname?\u0026#34;) sname = input(\u0026#34;\u0026gt; \u0026#34;) print(f\u0026#34;{sname} {fname}\u0026#34;) # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # your program goes above here if __name__ == \u0026#34;__main__\u0026#34;: ex(input,print) 9. Advice please Write a program that asks the user if they would like some advice. If they enter Y, provide them with an amusing message. Would you like some advice? \u0026gt; Y Always know where your towel is. Would you like some advice? \u0026gt; N 10. Darts During a game of darts, the highest score that can be achieved in a single turn is 180. The lowest is 0. Write a program that will allow a dart player to enter their score. The program should congratulate the player if their score was over 100. If the player scores less than 10 they should be told that some practice is required. Please enter your score: \u0026gt; 125 What a great score! Well done. Please enter your score: \u0026gt; 7 That was rubbish. Get practising! 11. Charity Collection Three friends have been collecting money for charity. A local company has offered to double the amount of money they collect if they raise over $1000. Write a program that allows the friends to enter their individual amounts. The program should then add the three amounts and store the total. If the total is greater or equal to $1000 the total should be doubled. Finally the total should be displayed. Enter the first amount raised. \u0026gt; 398 Enter the second amount raised. \u0026gt; 193 Enter the third amount raised. \u0026gt; 478 A total of $1069 was raised. This will be doubled to $2138. 12. Solid, Liquid, Gas At normal atmospheric pressure, water is a solid at or below 0°C, a gas above 100°C, and a liquid in the middle. Write a program that will return solid, liquid or gas to the user depending on the temperature they enter. Enter the current temperature. \u0026gt; 78 At 78°C, water will be a liquid. "},{"id":9,"href":"/dit9a/checkpoint1/","title":"Task 1 - Python Checkpoint","parent":"9 Digital Tech","content":""},{"id":10,"href":"/dit9a/bottleBasics/04templates/","title":"04 Templates","parent":"Bottle basics","content":"This example shows how a template can be used to generate lots of individual pages with a common structure.\nmain.py "},{"id":11,"href":"/dit9a/bottleBasics/03fullHtmlExample/","title":"Full HTML Example","parent":"Bottle basics","content":"This example is a complete HTML page.\nbase.html \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!-- Required meta tags --\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1\u0026#34;\u0026gt; \u0026lt;!-- Bootstrap CSS --\u0026gt; \u0026lt;link href=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; integrity=\u0026#34;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello, world!\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt; \u0026lt;!-- Bootstrap Bundle with Popper --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\u0026#34; integrity=\u0026#34;sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; "},{"id":12,"href":"/dit9a/checkpoint3/iteration/","title":"Iteration","parent":"Task 3 - Python Checkpoint","content":"from The Computing Zone\nTo be successful Follow this link to hand in your files.\nYou will need to save each of the tasks in this set in its own file, with a simple naming system:\n13. Lines cheat should be in a file named ex13.py, 14. Cricket over should be in a file named ex14.py and so on.\nYou will be submitting these files to a system which will mark them automatically. Since they\u0026rsquo;ll be marked by a computer, and computers are terminally stupid, you will need to make sure that your files are labelled correctly, or the computer will assume you haven\u0026rsquo;t done that particular exercise. You will also need to make sure your output exactly matches the examples, down to capitalisation, spelling, line breaks and spaces.\nYou need to make sure each of your exercises uses this code layout. Replace the included example (which is exercise 2 from the sequence section) with your code.\ndef ex(input,print): # your program goes below here # vvvvvvvvvvvvvvvvvvvvvvvvvvvv print(\u0026#34;What is your first name?\u0026#34;) fname = input(\u0026#34;\u0026gt; \u0026#34;) print(\u0026#34;What is your surname?\u0026#34;) sname = input(\u0026#34;\u0026gt; \u0026#34;) print(f\u0026#34;{sname} {fname}\u0026#34;) # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ # your program goes above here if __name__ == \u0026#34;__main__\u0026#34;: ex(input,print) 13. Lines cheat A naughty pupil has been given lines to copy as a punishment from their Computing teacher. The have been asked to type out “I must not behave like muppet in class” 20 times. Write a program that asks a pupil to enter a sentence. The same sentence should then be displayed 20 times. What sentence would you like copied? \u0026gt; I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. 14. Cricket over In cricket a bowler bowls 6 balls at a time. This is called an over. Each ball bowled may be hit by the batter who may score some runs. Write a program that allows the runs from an over to be entered (for example: 0, 2, 0, 0, 4, 6). The total scored in that over should then be displayed. Please enter the runs for each ball: \u0026gt; 0 \u0026gt; 2 \u0026gt; 0 \u0026gt; 0 \u0026gt; 4 \u0026gt; 6 This over\u0026#39;s score was 12. 15. Flexible cheater The naughty pupil forgot to hand their lines in and now has more to do. Adapt program 13 to allow the pupil to select how many lines the program produces. What sentence would you like copied? \u0026gt; I must not behave like a muppet in class. How many times would you like it copied? \u0026gt; 7 I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. 16. Charity drive The following year the three friends recruit many more charity raisers. Adapt program 11 to repeatedly ask for the next amount of money raised. If the user types a number, that number is added to the total and the program asks again. If the user just presses Enter, with nothing else, the program stops asking and displays the total raised, including the doubled value if appropriate. Enter the total raised by each person: \u0026gt; 238 \u0026gt; 624 \u0026gt; 546 \u0026gt; 333 \u0026gt; 651 \u0026gt; 174 \u0026gt; A total of $2566 was raised. This will be increased to $4566. 17. Password The program should give the user an error message if they enter the wrong password. A message “Entry gained!” should be displayed when the password is entered correctly. Please enter the password. \u0026gt; snool Sorry, Incorrect! Try again. Please enter the password. \u0026gt; giraffe Sorry, Incorrect! Try again. Please enter the password. \u0026gt; sesame Entry gained! 18. No more presents You have money to spend on your birthday. Write a program that will ask you what you have to spend, and then to enter the price of each present you want until your total reaches or is over the amount you started with. The program should produce the output shown. How much money did you get? \u0026gt; 200 You have $200. Price of next item: \u0026gt; 35 You have $165. Price of next item: \u0026gt; 100 You have $65. Price of next item: \u0026gt; 50 You have $15. Price of next item: \u0026gt; 45 You have overspent! You can\u0026#39;t afford the $45 item. How much money did you get? \u0026gt; 48 You have $48. Price of next item: \u0026gt; 48 You have spent all $48! 19. Guess the number A game is created where a user is required to guess an unknown number between 1 and 100 (inclusive). Each time the user guesses the program informs them if their guess is too high, too low or correct. The guessing game only finishes when the user’s guess matches the unknown number. I\u0026#39;m thinking of a number between 1 and 100. Which number do you think it is? 45 Your guess is too low. Try again. 86 Your guess is too high. Try again. 67 Your guess is too high. Try again. 50 Your guess is too low. Try again. 54 Your guess is too high. Try again. 52 Correct! I was thinking of 52. 20. Dance group (extension) You have been asked to write a program to store the names and ages of competitors in a dance competition. The program should display the name of the competitor and which level of competition they should be entered in. ‘Junior’ competitors are less than 12 years old, ‘Senior’ competitors are at least 18 years old. ‘Intermediate’ competitors are aged 12-17. Please enter a name: \u0026gt; Jean Gray Please enter Jean Gray\u0026#39;s age: \u0026gt; 13 Please enter a name: \u0026gt; Robert Drake Please enter Robert Drake\u0026#39;s age: \u0026gt; 24 Please enter a name: \u0026gt; Scott Summers Please enter Scott Summers\u0026#39;s age: \u0026gt; 15 Please enter a name: \u0026gt; Anna LeBeau Please enter Anna LeBeau\u0026#39;s age: \u0026gt; 9 Please enter a name: \u0026gt; Names and competition list: Jean Gray - Intermediate Robert Drake - Senior Scott Summers - Intermediate Anna LeBeau - Junior "},{"id":13,"href":"/dit9a/gameDesign/03walkthroughs/tankGame/","title":"Tanks","parent":"Walk-throughs","content":" Battle City 1985 Tank Moving the tank Background and Walls Randomizing the Walls Blocking Movements Tank Cannon Destroying Walls One Enemy Enemy Bullets Many Enemies Winning and Losing "},{"id":14,"href":"/dit9a/checkpoint2/","title":"Task 2 - Python Checkpoint","parent":"9 Digital Tech","content":""},{"id":15,"href":"/dit9a/gameDesign/03walkthroughs/chaseGame/","title":"Chase game","parent":"Walk-throughs","content":"Chase game\n"},{"id":16,"href":"/dit9a/checkpoint3/","title":"Task 3 - Python Checkpoint","parent":"9 Digital Tech","content":""},{"id":17,"href":"/dit9a/bottleBasics/","title":"Bottle basics","parent":"9 Digital Tech","content":""},{"id":18,"href":"/dit9a/gameDesign/03walkthroughs/mazeGame/","title":"Maze game","parent":"Walk-throughs","content":"Maze game\nIntroduces tile maps\n"},{"id":19,"href":"/dit9a/gameDesign/03walkthroughs/shootingGame/","title":"Shooting game","parent":"Walk-throughs","content":"Shooting game\n"},{"id":20,"href":"/dit9a/gameDesign/03walkthroughs/racingGame/","title":"Racing game","parent":"Walk-throughs","content":"Racing game\n"},{"id":21,"href":"/dit9a/gameDesign/01gettingStarted/","title":"Getting started","parent":"Game Design","content":""},{"id":22,"href":"/dit9a/gameDesign/02state/stateWhatIs/","title":"What is state?","parent":"State","content":" What is state? Imagine you are enjoying a particularly engaging session of Uno with some friends, and by a peculiar set of circumstances you are required to pack up the game back into its pack, but you and your friends want to be able to resume exactly where you are when you next meet. What would you have to record so that you can restore the game exactly as it is right now?\nYou would need to note who is playing and which order they are sitting in, and also which cards they are holding. You\u0026rsquo;d also need to know whose turn it is and, because of the reverse cards, which direction you\u0026rsquo;re currently playing in.\nWould you need to jot down which cards are in the deck or the discard pile, and which order they are in? Why, or why not? What differece will it make?\nThis whole question of what is required to keep track of the game is called the game\u0026rsquo;s state. For some games, it is very little. Consider what you would have to record to pause, and later resume, a game of Noughts and Crosses. How about draughts, or chess? Could you pause a live-action game of soccer in mid play, and resume it later?\n"},{"id":23,"href":"/dit9a/gameDesign/02state/stateReacting/","title":"Reacting to and changing state","parent":"State","content":"In all computer games, the game proceeds a teeny bit at a time, with each of the agents in the game making decisions about what to do next based on the current state, which then changes the game state, and then the agents all make a new set of decisions, and the game state changes again. From outside this can appear as a smooth, seamless and continuous process, but it is always made of little, discrete moves. You wouldn\u0026rsquo;t imagine that FIFA, or any of the other major sporting titles, was made by little steps of lumpy decision making, but it is, just many dozens of times per second.\nEven the user input looks discrete and lumpy to the computer, as it will look at the state of the inputs (your keyboard, mouse, controller) at the instant it needs to know what you wish to do. So while you might think of yourself as making a series of smooth-changing motions with the analog sticks, for example, the computer sees you making spot decisions about 60 times per second.\n"},{"id":24,"href":"/dit9a/gameDesign/02state/","title":"State","parent":"Game Design","content":""},{"id":25,"href":"/dit9a/gameDesign/02basics/textBasedGames/","title":"Text-based quiz games","parent":"Learning the basics","content":"from Coding Games with Pygame Zero \u0026amp; Python, by Richard Smith\nThese programs can be entered using any text editor, but I suggest using the Mu editor because it comes with Python, Pygame Zero and other libraries all pre-installed in one easy download.\n3.1. Hello, world The traditional first program used to make sure Python is working and that we can run programs.\nIf using the Mu editor:\nClick the mode button and make sure the mode is set to Python3. Type in the program. Click Save and enter a name for the program. Click Run. Program 3.1 Hello, world\n1 2 3 print(\u0026#34;Hello world\u0026#34;) # This line is a comment. The computer will ignore these. 3.2. Getting input from the keyboard This program will pause and wait for you to enter some text with the keyboard, followed by the return/enter key. The text you enter is stored in a variable, x.\nProgram 3.2 Getting input from the keyboard\n1 2 3 4 5 print(\u0026#34;Enter your name:\u0026#34;) x = input() print(\u0026#34;Hello\u0026#34;, x) if x == \u0026#34;richard\u0026#34;: print(\u0026#34;That is a very cool name\u0026#34;) Exercise Add some names of your friends and display a different message for each friend.\n3.3. Making decisions: if, elif, else This is how to add another name to Program 3.2.\nProgram 3.3 Decisions: if, elif, else 1 2 3 4 5 6 7 8 9 print(\u0026#34;Enter your name:\u0026#34;) x = input() print(\u0026#34;Hello\u0026#34;, x) if x == \u0026#34;richard\u0026#34;: print(\u0026#34;That is a very cool name\u0026#34;) elif x == \u0026#34;nick\u0026#34;: print(\u0026#34;That is a rubbish name\u0026#34;) else: print(\u0026#34;I do not know your name\u0026#34;, x) Program 3.3 is very similar to Program 3.2. The new lines have been highlighted. You can either modify Program 3.2, or else create a new file and use copy and paste to copy the code from the old program into the new.\n3.4. A random maths question Program 3.4 A random maths question 1 2 3 4 5 6 7 8 9 10 import random n = random.randint(0, 10) print(\u0026#34;What is\u0026#34;, n, \u0026#34;plus 7?\u0026#34;) g = int(input()) # Why do we use int() here? if g == n + 7: print(\u0026#34;Correct\u0026#34;) else: print(\u0026#34;Wrong\u0026#34;) Exercise Add some more questions, e.g.\nInstead of 7, use another random number. Use a bigger random number. Multiply (use *), divide (use /) or subtract (use -) numbers. Exercise Print how many questions the player got correct at the end.\n3.5. Keeping score We create a score variable to record how many questions the player answered correctly.\nProgram 3.5 Keeping score 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 score = 0 print(\u0026#34;What is 1+1 ?\u0026#34;) g = int(input()) if g == 2: print(\u0026#34;Correct\u0026#34;) score = score + 1 print(\u0026#34;What is 35-25 ?\u0026#34;) g = int(input()) if g == 10: print(\u0026#34;Correct\u0026#34;) score = score + 1 print(\u0026#34;Your score:\u0026#34;, score) 3.6. Guessing game with a loop This while loop goes round and round forever … or until the player gets a correct answer, and then it breaks out of the loop. Note that everything in the loop is indented.\nProgram 3.6 Guessing game with a loop 1 2 3 4 5 6 7 8 9 10 11 12 import random n = random.randint(0, 10) while True: print(\u0026#34;I am thinking of a number, can you guess what it is?\u0026#34;) g = int(input()) if g == n: break else: print(\u0026#34;Wrong\u0026#34;) print(\u0026#34;Correct!\u0026#34;) Exercise Give a hint to the player when they are wrong. Was their guess too high or too low?\nExercise Print how many guesses they took to get it right at the end.\n3.7. Improved guessing game Program 3.6 with a hint whether the guess is greater or lesser than the answer.\nProgram 3.7 Improved guessing game 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import random n = random.randint(0, 100) guesses = 0 while True: guesses = guesses + 1 print(\u0026#34;I am thinking of a number, can you guess what it is?\u0026#34;) g = int(input()) if g == n: break elif g \u0026lt; n: print(\u0026#34;Too low\u0026#34;) elif g \u0026gt; n: print(\u0026#34;Too high\u0026#34;) print(\u0026#34;Correct! You took\u0026#34;, guesses, \u0026#34;guesses.\u0026#34;) "},{"id":26,"href":"/dit9a/gameDesign/03walkthroughs/verticalShooter/","title":"Vertical shooter","parent":"Walk-throughs","content":" Twin Bee "},{"id":27,"href":"/dit9a/gameDesign/02basics/graphics/","title":"Drawing graphics","parent":"Learning the basics","content":"adapted from Coding Games with Pygame Zero \u0026amp; Python, by Richard Smith\nTo create graphics for our games we will use the Pygame Zero library. You will find the documentation on the website useful!\nThe smallest square that can be displayed on a monitor is called a pixel. This diagram shows a close-up view of a window that is 40 pixels wide and 40 pixels high. At normal size you will not see the grid lines.\nPixel grid We can refer to any pixel by giving two co-ordinates, (x, y). Make sure you understand co-ordinates before moving on because everything we do in Pygame Zero will use it. (In maths this called a Cartesian coordinate system).\n4.1. Lines and circles If are using the Mu editor, Pygame Zero is built-in, but you must remember to click ‘Mode’ and select ‘Pygame Zero’ before running your program!\nIf you are using a different editor, instructions are online.\nProgram 4.1 Lines and circles\n1 2 3 4 5 6 7 8 9 10 WIDTH = 500 # What are these units? What if we change them? HEIGHT = 500 # What if we delete this line? def draw(): screen.clear() screen.draw.circle((250, 250), 50, \u0026#34;white\u0026#34;) screen.draw.filled_circle((250, 100), 50, \u0026#34;red\u0026#34;) screen.draw.line((150, 20), (150, 450), \u0026#34;purple\u0026#34;) screen.draw.line((150, 20), (350, 20), \u0026#34;purple\u0026#34;) Exercise Finish drawing this picture.\nExercise Draw your own picture.\n4.2. Moving rectangles To make things move we need to add the special update() function. We don’t need to write our own loop because Pygame Zero calls this function for us in its own loop, over and over, many times per second.\nProgram 4.2 Moving rectangles\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 WIDTH = 500 HEIGHT = 500 box = Rect((20, 20), (50, 50)) def draw(): screen.clear() screen.draw.filled_rect(box, \u0026#34;red\u0026#34;) def update(): box.x = box.x + 2 if box.x \u0026gt; WIDTH: box.x = 0 Exercise Make the box move faster.\nExercise Make the box move in different directions.\nExercise Make two boxes with different colours.\n4.3. Actor sprites Actor sprites are very similar to boxes! Click Images to see the folder of image files available. alien.png should already be there, but for other images you must add the files yourself.\nYou could use Microsoft Paint which comes with Windows but I recommend you download and install Krita.\nProgram 4.3 Actor sprites\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 WIDTH = 500 HEIGHT = 500 alien = Actor(\u0026#39;alien\u0026#39;) alien.x = 0 alien.y = 50 def draw(): screen.clear() alien.draw() def update(): alien.x += 2 if alien.x \u0026gt; WIDTH: alien.x = 0 Exercise Draw or download your own image to use instead of alien.\n4.4. Background image We are going to add a background image to Program 4.3.\nClick Images to see the folder of image files available.\nYou must create or download a picture to use a background. Save it as background.png in the directory that opens when you click Images. It should be the same size as the window, 500×500 pixels and it must be in .png format.\nProgram 4.4 Background\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 WIDTH = 500 HEIGHT = 500 alien = Actor(\u0026#39;alien\u0026#39;) alien.x = 0 alien.y = 50 background = Actor(\u0026#39;background\u0026#39;) def draw(): screen.clear() background.draw() alien.draw() def update(): alien.x += 2 if alien.x \u0026gt; WIDTH: alien.x = 0 Exercise Create a picture to use a background. Save it as background.png. Run the program.\n"},{"id":28,"href":"/dit9a/gameDesign/02basics/","title":"Learning the basics","parent":"Game Design","content":""},{"id":29,"href":"/dit9a/gameDesign/02state/stateProblems/","title":"Problems with state","parent":"State","content":" Keep it simple Broadly speaking, the more state your program has, the more complex it is, and thus the more opportunities there are for mistakes. This should encourage us to look for a solution with as little state information as possible. As a simple example, in a fighting game, it is important to know whether a character is alive or dead, and how much health they have. So you might think to have an integer to keep track of health, and a couple of boolean flags to keep track of the character\u0026rsquo;s life status:\nhealth: int isAlive: bool isDead: bool But on inspection, you don\u0026rsquo;t need all this. First of all, a character in a game is usually either alive or dead, but not both or neither, so you could just have one of the boolean values, and look for isAlive or not isAlive. But actually, since you also have a health variable, it will likely work if you just check to see whether or not health \u0026gt; 0, and not need either of the boolean flags. It will depend on your specific project what things you can and can\u0026rsquo;t do, but this is a general thing to think about, as it is easy to over-complicate your project by accident, allowing bugs to creep in!\nWhat wrong looks like If you\u0026rsquo;ve spent much time playing computer games, you\u0026rsquo;ve probably seen the side-effects of problems with a game\u0026rsquo;s state.\nIf you\u0026rsquo;ve ever played a first person shooter (FPS) or a role-playing game (RPG) and found yourself \u0026ldquo;stuck\u0026rdquo; in a wall, or a rock, or with your feet below the floor level, then you\u0026rsquo;ve entered a state that shouldn\u0026rsquo;t be possible.\nRPGs such as those from the Elder Scrolls, Mass Effect or Fallout series have a lot of state tied up in whether or not you\u0026rsquo;ve completed a certain mission, made a particular decision, or spoken to, saved or killed a certain character. So there are often dozens, even hundreds, of boolean flags keeping track of all this. Under these circumstances it is easy for the programmers to forget, when one checkpoint is cleared, to enable or disable one of the flags, which will lead to things like a subsequent mission not being available even though the previous one has been completed, or a character refusing to offer a conversation option, or being hostile when they shouldn\u0026rsquo;t, or a thousand other ways this could play out.\nMultiplayer challenges Multiplayer games played on the one computer, such as split-screen console games, are not much more complicated than single player games; there are just more input devices to work through. Multi-system games, such as games played over LAN or the Internet, are much nastier to manage, however.\nIn a multi-system game, there is almost always a server, which manages the game, and then a series of clients, which are the player computers. The server can be either:\na dedicated machine for running the game, which is the case for most games played over the internet, or one of the player computers, which \u0026ldquo;hosts\u0026rdquo; the game, and fulfils the role of the server as well as being a client for one of the players. This arrangement is more common for computers played over a local network. Many games, such as Minecraft, can be set up in either way. In both cases it is the server which is in charge of maintaining and updating the state of the game, which it then distributes to the other machines. The more game state there is, the longer it will take to send to the other players. Large games will typically find ways to reduce the amount of game state that is required to be sent at a time, and minimise the people who need it.\nIn World of Warcraft, for example, breaking the world up into smaller regions means that a player in one area doesn\u0026rsquo;t need updates on anything happening in another area, so they need relatively little information, and there will be relatively few players in each region, compared with the world overall, so that information only needs to go to a few players. This is one of the reasons that game performance in the big cities of WoW can take a noticable dive: there are now far more people in the one place, meaning there is much more game state to distribute, and far more people to distribute it to, and handle moves from.\nIn an online game of something like chess or Uno, a delay of even several seconds between moves wouldn\u0026rsquo;t make any significant difference to the success of the game. Moves take quite a while anyway, a little transmission delay is no big thing. But in a first person shooter, delays in transmission cause big problems.\nIf an update hasn\u0026rsquo;t come from the server in time, the player computer can choose either to wait until it gets one, creating stutters and freezes in the game, or it can run the simulation locally with only the input it is getting, leading to other players running at walls or standing around awkwardly. The latter is usually better for dealing with small delays, as it keeps the game smooth for the player, and hopefully the game can get everything back on track before anything weird happens.\nThe longer the delay between state updates, the more likely the local copy of the state is to be wrong, and the greater the difference is likely to be. You can see the effects of this if, often after a brief stutter, either you or another player suddenly \u0026ldquo;teleports\u0026rdquo; to a slightly different location.\nFrom the server\u0026rsquo;s perspective, in a FPS it has a tight window to get the move data from the clients, update the game state, and distribute the new game state, if it wants to keep the game running smoothly. If an update doesn\u0026rsquo;t arrive from a client in time, rather than waiting indefinitely and causing a freeze, the server will probably assume there is no new information from the client and proceed. If it continues to have substantial problems repeatedly with the same client, a server sometimes is programmed to give up and \u0026ldquo;kick\u0026rdquo; the client from the game, in the hope that the game can continue to run smoothly for everyone else.\n"},{"id":30,"href":"/dit9a/gameDesign/02basics/graphicsSlides/","title":"Drawing graphics (slides)","parent":"Learning the basics","content":" Drawing graphics adapted from Coding Games with Pygame Zero \u0026amp; Python, by Richard Smith\nThe smallest square that can be displayed on a monitor is called a pixel. This diagram shows a close-up view of a window that is 40 pixels wide and 40 pixels high. At normal size you will not see the grid lines.\nWe can refer to any pixel by giving two co-ordinates,\n(x, y)\nMake sure you understand co-ordinates before moving on because everything we do in Pygame Zero will use it. (In maths this called a Cartesian coordinate system).\nLines and circles If are using the Mu editor, Pygame Zero is built-in, but you must remember to click ‘Mode’ and select ‘Pygame Zero’ before running your program!\nIf you are using a different editor, instructions are online.\nCopy the following code into a new file, and see what it creates.\nWIDTH = 500 # What are these units? What if we change them? HEIGHT = 500 # What if we delete this line? def draw(): screen.clear() screen.draw.circle((250, 250), 50, \u0026#34;white\u0026#34;) screen.draw.filled_circle((250, 100), 50, \u0026#34;red\u0026#34;) screen.draw.line((150, 20), (150, 450), \u0026#34;purple\u0026#34;) screen.draw.line((150, 20), (350, 20), \u0026#34;purple\u0026#34;) Exercise Finish drawing this picture.\nExercise Using these three functions, now draw your own picture.\nMoving rectangles To make things move we need to add the special update() function. We don’t need to write our own loop because Pygame Zero calls this function for us in its own loop, over and over, many times per second.\nCopy the following code into a new file, and see what it creates.\nWIDTH = 500 HEIGHT = 500 box = Rect((20, 20), (50, 50)) def draw(): screen.clear() screen.draw.filled_rect(box, \u0026#34;red\u0026#34;) def update(): box.x = box.x + 2 if box.x \u0026gt; WIDTH: box.x = 0 Exercise Make the box move faster.\nExercise Make the box move in different directions.\nExercise Make two boxes with different colours.\n"},{"id":31,"href":"/dit9a/gameDesign/02basics/arcade/","title":"Arcade games","parent":"Learning the basics","content":"adapted from Coding Games with Pygame Zero \u0026amp; Python, by Richard Smith\nKeyboard input The alien moves when you press the cursor keys.\nProgram 4.5 Keyboard input\n1 2 3 4 5 6 7 8 9 10 11 12 alien = Actor(\u0026#39;alien\u0026#39;) alien.pos = (0, 50) def draw(): screen.clear() alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 Exercise Make the alien move up and down as well as left and right.\nExercise Use the more concise += operator to change the alien.x value.\nExercise Use the or operator to allow WASD keys to move the alien in addition to the cursor keys.\n5.1. Collisions Arcade games need to know when one Actor sprite has hit another Actor sprite. Most of this code is copied from Program 4.2 and Program 4.5.\nProgram 5.1 Collisions\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 WIDTH = 500 HEIGHT = 500 alien = Actor(\u0026#34;alien\u0026#34;) alien.pos = (400, 50) box = Rect((20, 20), (100, 100)) def draw(): screen.clear() screen.draw.filled_rect(box, \u0026#34;red\u0026#34;) alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 box.x = box.x + 2 if box.x \u0026gt; WIDTH: box.x = 0 if alien.colliderect(box): print(\u0026#34;hit\u0026#34;) Exercise Add vertical movement (as you did in Exercise Program 4.5).\nExercise Make the box chase the alien.\nExercise Print number of times the box hits the alien (i.e. the score).\n5.2. Chase Instead of moving constantly to the right we can make the movement conditional with an if statement so the box chases the alien. Most of this code is copied from Program 5.1. New lines are highlighted. We have also changed what happens when the box catches the alien: the program now exits and you must run it again to play again. This may not be what you want in your game!\nProgram 5.2 Alien chase 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 WIDTH = 500 HEIGHT = 500 alien = Actor(\u0026#34;alien\u0026#34;) alien.pos = (400, 50) box = Rect((20, 20), (100, 100)) def draw(): screen.clear() screen.draw.filled_rect(box, \u0026#34;red\u0026#34;) alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 if box.x \u0026lt; alien.x: box.x = box.x + 1 if box.x \u0026gt; alien.x: box.x = box.x - 1 if alien.colliderect(box): exit() Exercise Add vertical movement (as you did in previous exercise).\nExercise Draw a new enemy image. Save it as enemy.png in your mu_code/images folder. Load it as an Actor(‘enemy’) instead of the Rect().\n5.3. Powerup Instead of an enemy the box here is a powerup that the player must collect. When he does it disappears and moves to a new location.\nProgram 5.3 Collect the powerups\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 WIDTH = 500 HEIGHT = 500 import random alien = Actor(\u0026#34;alien\u0026#34;) alien.pos = (400, 50) box = Rect((20, 20), (100, 100)) score = 0 def draw(): screen.clear() screen.draw.filled_rect(box, \u0026#34;green\u0026#34;) alien.draw() def update(): global score if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 if alien.colliderect(box): box.x = random.randint(0, WIDTH) box.y = random.randint(0, HEIGHT) score = score + 1 print(\u0026#34;Score:\u0026#34;, score) Exercise Add vertical movement (as you did in Exercise ref{exercise:updown}).\nExercise Draw a new powerup image. Save it as powerup.png in your mu_code/images folder. Load it as an Actor(‘powerup’) instead of the Rect().\nAdvanced Combine this program with the enemy from Program Program 5.2 and the background from Program 4.4 and whatever else you want to make your own game.\n5.4. Sound and animation Pygame Zero comes with one other image alien_hurt.png and one sound eep.wav. If you want more you will have to add them to the sounds and images folders.\nMost of this code is copied from Program 5.1\nProgram 5.4 Sound and animation upon collision 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 WIDTH = 500 HEIGHT = 500 alien = Actor(\u0026#34;alien\u0026#34;) alien.pos = (0, 50) box = Rect((20, 20), (100, 100)) def draw(): screen.clear() screen.draw.filled_rect(box, \u0026#34;red\u0026#34;) alien.draw() def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 box.x = box.x + 2 if box.x \u0026gt; WIDTH: box.x = 0 # PLAY SOUND AND SHOW IMAGE WHEN HIT if alien.colliderect(box): alien.image = \u0026#39;alien_hurt\u0026#39; sounds.eep.play() else: alien.image = \u0026#39;alien\u0026#39; Exercise Record your own sound effect and add it to the game.\nAdvanced Add more boxes or sprites that move in different ways for the player to avoid.\nAdvanced Add a second alien controlled by different keys or gamepad for player 2.\n5.5. Mouse clicks This uses a function call-back for event-based input. It is similar to Program 5.4 but:\nThe box has been removed.\nThere is an on_mouse_down() special function that is called automatically when the player click the mouse.\nThe score is displayed.\nSee Program 2.17 for more about functions.\nProgram 5.5 Getting input from mouse clicks\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 alien = Actor(\u0026#34;alien\u0026#34;) alien.pos = (0, 50) score = 0 def draw(): screen.clear() alien.draw() screen.draw.text(\u0026#34;Score \u0026#34;+str(score), (0,0)) def update(): if keyboard.right: alien.x = alien.x + 2 elif keyboard.left: alien.x = alien.x - 2 alien.image = \u0026#39;alien\u0026#39; def on_mouse_down(pos, button): global score if button == mouse.LEFT and alien.collidepoint(pos): alien.image = \u0026#39;alien_hurt\u0026#39; sounds.eep.play() score = score + 1 5.6. Mouse movement Program 5.6 Getting input from mouse movement\nwiggle your mouse around the screen! 1 2 3 4 5 6 7 8 alien = Actor(\u0026#34;alien\u0026#34;) def draw(): screen.clear() alien.draw() def on_mouse_move(pos): alien.pos = pos Exercise What happens if you delete line 8 and replace it with this:\nanimate(alien, pos=pos, duration=1, tween=\u0026lsquo;bounce_end\u0026rsquo;)\nExercise What happens if you change on_mouse_move to on_mouse_down?\nAdvanced Make a game with one alien controlled by mouse and another controlled by keyboard\n"},{"id":32,"href":"/dit9a/gameDesign/02state/updateDrawCycle/","title":"The update/draw cycle","parent":"State","content":"In Pygame Zero, as with most game engines, the code that manages the game state is separate from the code that handles the display. In Pygame Zero, there are two main functions:\nupdate(), which responds to inputs and manages the game state, and draw(), which coordinates updating the screen to match the game state. stateDiagram-v2 direction LR [*] --\u003e update() update() --\u003e draw() draw() --\u003e update() Where possible, these two functions will be run, update then draw, update then draw, 60 times per second. Sometimes, however, the computer gets busy running another task in the background, or the code involved in drawing the screen takes longer than usual, and it isn\u0026rsquo;t possible to run draw() sixty times per second. If it only runs 58 times, or 51 times, it won\u0026rsquo;t make a particular difference, as anything faster than about 25 times per second will look smooth and continuous. The objects on the screen will still move smoothly, you just mightn\u0026rsquo;t get as many updates in a second as planned.\nBut humans are very good at anticipating timing, so if the game engine runs irregularly, it will affect the behaviour of moving objects, and the player will more likely notice. Consider what would happen if a person were to walk at a consistent pace from one side of the oval to the other, and you had your eyes closed, but opened them once every couple of seconds. You\u0026rsquo;ll quickly form an idea of their path in your mind, and will be able to accurately predict where they\u0026rsquo;ll be next time you open your eyes, whether you wait two seconds or four. So it is when the draw() function is run irregularly. But now imagine the person walking changes their speed, sometimes pacing faster, other times slower, perhaps pausing for just a fraction of a second here and there. You will now find it extremely hard to predict their motion, no matter how much of the time you have your eyes open. This is what it would be like if update() ran irregularly, and is much more disruptive to the user.\nYou can imagine, too, that if you were to design a simple multiplayer game, the server would be the one to update() the game state, but if it were a dedicated server it would have no screen to draw on. And each of the player computers would receive the game state from the server, and use it to draw() to their screens, but wouldn\u0026rsquo;t have to ever run the update function.\n"},{"id":33,"href":"/dit9a/gameDesign/03walkthroughs/","title":"Walk-throughs","parent":"Game Design","content":""},{"id":34,"href":"/dit9a/reference/","title":"Reference","parent":"9 Digital Tech","content":" Tutorials Python If you are new to Python, or need a quick refresher, here is a good interactive guide you can use:\nAposteriori: Introduction to Python The \u0026ldquo;official\u0026rdquo; Python tutorial, which is bigger, longer, and more thorough:\nThe Python Tutorial Bottle The official Bottle tutorial\nBottle Tutorial A series of YouTube videos on various aspects of Bottle. Some are quite short, a couple are very long:\nBottle Tutorials Documentation Python Python Standard Library (ver 3.9) Bottle Bottle: Python Web Framework Random Zetcode bottle guide "},{"id":35,"href":"/dit9a/glossary/","title":"Glossary","parent":"9 Digital Tech","content":""},{"id":36,"href":"/dit9a/gameDesign/03walkthroughs/moreTutorials/","title":"More walk-throughs","parent":"Walk-throughs","content":"Simple Game Tutorials for Python and Pygame Zero 1.2\n"},{"id":37,"href":"/dit9a/gameDesign/inspiration/","title":"Inspiration","parent":"Game Design","content":"Here is a selection of games which are over 30 years old, but which show that well thought out gameplay doesn\u0026rsquo;t need graphics to shine.\nMaybe one of these will inspire your next creation\u0026hellip;\n"},{"id":38,"href":"/dit9a/gameDesign/02state/maintainingState/","title":"Maintaining State","parent":"State","content":""},{"id":39,"href":"/dit9a/bottleBasics/01helloWorld/","title":"01 Hello, World!","parent":"Bottle basics","content":"Make a new file named hello.py and enter the following code: 1 2 3 4 5 6 7 from bottle import route, run @route(\u0026#39;/\u0026#39;) def index(): return \u0026#34;Hello, world!\u0026#34; run(reloader=True, debug=True) To run your file, you should be able to press the play button in the top right of the window. Failing that, from the file explorer on the left, right click on your file and choose Open in Integrated Terminal. The terminal will open below the main editor pane. In the terminal, type python hello.py. If you named your file something else, use its name here.\nYou should see this:\nBottle v0.12.19 server starting up (using WSGIRefServer())...\rListening on http://127.0.0.1:8080/\rHit Ctrl-C to quit. If so, it\u0026rsquo;s working! Control-click on the link to open it directly in your browser. You should see \u0026ldquo;Hello, world!\u0026rdquo; in the browser window.\nSo what\u0026rsquo;s going on? 1 from bottle import route, run The first line imports the bits of bottle that we\u0026rsquo;ll be using. In more complicated examples, you\u0026rsquo;ll notice this line will get longer, as we use more parts of the module.\n4 5 def index(): return \u0026#34;Hello, world!\u0026#34; This defines a function called index(). When called it simply returns a string. In time, we\u0026rsquo;ll replace this with something more complicated: a whole HTML document, with CSS styling, generated with a template, customised with data particular to the page and user. But for now, it\u0026rsquo;s a simple string.\n3 @route(\u0026#39;/\u0026#39;) The odd-looking code on line 3 defines what URL patterns should be handled by this function. This weird syntax is a Python shortcut for a function called a decorator. For now, we don\u0026rsquo;t need to worry about the name or how it works, we only need to know how to use it.\nAt this point we\u0026rsquo;ve defined all the parts of our web application, and all that is left is to turn the webserver on and start listening for requests.\n7 run(reloader=True, debug=True) To find out more about the run() function (there are lots of things you fiddle with), look at the bottle.run() page.\n"},{"id":40,"href":"/dit9a/","title":"9 Digital Tech","parent":"","content":"Welcome to 9 Digital Tech (Sem 1)!\nThis semester length subject focusses on building web-based projects in Python, including dynamic websites with flat file data sources.\nOver the semester, you\u0026rsquo;ll have the opportunity to:\ndesign websites using HTML templates and CSS styling design and implement dynamic functionality by writing Python code using the Bottle micro-framework design and work with flat file data storage using JSON "},{"id":41,"href":"/dit9a/glossary/bottleRun/","title":"bottle.run()","parent":"Glossary","content":"run(reloader=True, debug=True) You can just say run(), and it will begin using a set of defaults, but we have customised the server slightly. The reloader flag tells the server to restart every time we change a code file, which saves us from turning it off and on again every time we modify our code. Very handy for development! The debug flag does a something thing for templates.\nThere are a lot of other flags you can use, but two that you might find handy are:\nhost=\u0026quot;localhost\u0026quot; Sets which addresses the server will listen on. Localhost is a magic name that refers to your local machine. By hosting on localhost, only your local machine can access your server, which is ideal for personal things and anything you\u0026rsquo;re developing, which might have bugs or potential weaknesses to exploit. You can choose one of your computer\u0026rsquo;s current IP addresses with, e.g. host=\u0026quot;192.168.1.203\u0026quot;, and now your computer will be visible to other devices connected to that local network. Finally, you can also choose to listen on all available addresses by using host=\u0026quot;0.0.0.0\u0026quot;. port=\u0026quot;8080\u0026quot; Sets which port the server will listen on. You will need administrator access to use a port number below 1024. The default port for HTTP traffic is port 80, and common alternatives are 8080 and 8000. "},{"id":42,"href":"/dit9a/categories/","title":"Categories","parent":"9 Digital Tech","content":""},{"id":43,"href":"/dit9a/gameDesign/inspiration/EnchantedScepters/","title":"Enchanted Scepters","parent":"Inspiration","content":"by Silicon Beach Software (1984)\nIn this part-illustrated, part-text adventure, you are tasked with recovering four magical sceptres (earth, fire, wind and water, of course) to save your kingdom from invasion.\n"},{"id":44,"href":"/dit9a/gameDesign/inspiration/Iago/","title":"Iago","parent":"Inspiration","content":"by David Reed (1984)\nIago was a very early Othello/Reversi game, which offered excellent gameplay. You could play against a friend or a computer with three levels of difficulty, on three different sizes of board.\nIt even has a special feature to hide the game if you are playing it at work and your boss is coming\u0026hellip;\n"},{"id":45,"href":"/dit9a/gameDesign/inspiration/PhraseCraze/","title":"Phrase Craze","parent":"Inspiration","content":"by Brad Pettit (1986)\nBorrowing heavily from the TV game show Wheel of Fortune, Phrase Craze offers up to four players the chance to relive the thrill of being on the set, complete with game board, wheel, and charming host. You could also modify the PhraseFile to create your own puzzles.\n"},{"id":46,"href":"/dit9a/gameDesign/01gettingStarted/software/","title":"Software","parent":"Getting started","content":"To develop games using Pygame Zero, you have two main options:\nuse Mu use another editor Mu is set up to be very helpful for beginners. It has some keyboard shortcuts, good help text, nice shortcut buttons, and is generaly very friendly to use and has a lot of features to help beginners get started.\nAfter you have been writing code for a while, you may find that a standard Python environment and a \u0026ldquo;full\u0026rdquo; text editor like Visual Studio Code allows you a lot more power and flexibility, at the cost of doing some more basic things yourself.\nAn example of this is that Mu will automatically add the necessary first and last lines to your Pygame Zero file.\nThe very top line, line 1, must read:\nimport pgzrun And the very last line must read:\npgzrun.go() If you are using Mu, it will automatically add these lines if you forget. With VS Code or another editor, you will need to do this yourself.\nUsing Mu Install Mu, using the Company Portal (on a school computer), or from the website. You\u0026rsquo;re done!\nThere is a beginner\u0026rsquo;s guide to Mu, if you want more help on how to use Mu.\nTo make games in Pygame Zero, make sure you select the mode Pygame Zero.\nUsing Visual Studio Code From the Company Portal (on a school computer), or using the links below, install:\nVisual Studio Code Python "},{"id":47,"href":"/dit9a/reference/strings/","title":"Strings","parent":"Reference","content":"adapted from Medium.com\nLet us see the different operations that can be performed on the below string.\nword = \u0026#39;Sample\u0026#39; len(word) # 6 +---+---+---+---+---+---+ | S | a | m | p | l | e | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 1 Concatenation Join a string with another string\nword = \u0026#39;Sample\u0026#39; word + \u0026#39; \u0026#39; + \u0026#39;trick\u0026#39; # \u0026#39;Sample trick\u0026#39; 2 Indexed Access of Strings A string in a python can be indexed to perform operations on the string.\nPositive single character\nword = \u0026#39;Sample\u0026#39; word[3] # \u0026#39;p\u0026#39; Negative single character\nword = \u0026#39;Sample\u0026#39; word[-2] # \u0026#39;l\u0026#39; String Reverse\nword = \u0026#39;Sample\u0026#39; word[::-1] # \u0026#39;elpmaS\u0026#39; Reverse string by iterating through string contents.\nword = \u0026#39;Sample\u0026#39; for char in reversed(word): print(char) ### Output ### e l p m a S 3 Slicing of Strings Slicing allows us to access a substring of characters from a word.\nExample 1 word = \u0026#39;Sample\u0026#39; word[0:3] # \u0026#39;Sam\u0026#39; Example 2 word = \u0026#39;Sample\u0026#39; word[4:5] # \u0026#39;le\u0026#39; Example 3 word = \u0026#39;Sample\u0026#39; word[:5] # \u0026#39;Sampl\u0026#39; 4 Remove leading and trailing characters To remove space before and after a string the strip() method can be used has shown below\n\u0026#39; Sample \u0026#39;.strip() # \u0026#39;Sample\u0026#39; \u0026#39;sample\u0026#39;.strip(\u0026#39;ple\u0026#39;) # \u0026#39;sam\u0026#39; 5 Left fill with ASCII ‘0’ To left fill with ASCII ‘0’’, we can use zfill() method to make a length of required string width.\n\u0026#34;10\u0026#34;.zfill(6) # \u0026#39;000010\u0026#39; \u0026#34;-10\u0026#34;.zfill(6) # \u0026#39;-00010\u0026#39; 6 Find Substring The find() method can be used to extract a substring from a string\n\u0026#39;sample\u0026#39;.find(\u0026#39;am\u0026#39;,0,5) # \u0026#39;1\u0026#39; \u0026#39;sam\u0026#39; in \u0026#39;sample\u0026#39; # True 7 Find if the string contains Numbers The isalpha() method can be used to find if a string contains number\n\u0026#39;123\u0026#39;.isalpha() # False \u0026#39;abc\u0026#39;.isalpha() # True \u0026#39;1abc\u0026#39;.isalpha() # False 8 Find if the string is alphanumeric The isalnum() method can be used to find if the string contains alphanumeric and at least one character\n\u0026#39; \u0026#39;.isalnum() # False \u0026#39;abc\u0026#39;.isalnum() # True 9 Find if the string is having only whitespace The isspace() method can be used to determine if the string is only whitespace character\n\u0026#39; \u0026#39;.isspace() # True \u0026#39;Sample \u0026#39;.isspace() # False 10 Remove Spaces on the left side of the string The lstrip() Strings can be used to remove whitespace characters on the left.\n\u0026#39; sample \u0026#39;.lstrip() # \u0026#39;spacious \u0026#39; \u0026#39;www.example.com\u0026#39;.lstrip(\u0026#39;cmowz.\u0026#39;) # \u0026#39;example.com\u0026#39; 11 Remove Spaces on the right side of the string The rstrip() can be used to remove whitespace characters on the left.\n\u0026#39; sample \u0026#39;.rstrip() # \u0026#39;spacious \u0026#39; \u0026#39;mississippi\u0026#39;.rstrip(\u0026#39;ipz\u0026#39;) # \u0026#39;mississ\u0026#39; 12 Formatted String Literals The string literals which are prefixed with ‘f’ or ’F’ are called f-string.\nword = \u0026#34;Sample\u0026#34; f\u0026#34;THis is a {word!r} string.\u0026#34; # \u0026#34;THis is a \u0026#39;Sample\u0026#39; string.\u0026#34; 13 Joining multiple strings from a list The join() method can be used to join the strings in a list\nTest = [\u0026#34;This\u0026#34;,\u0026#34;is\u0026#34;,\u0026#34;Sample\u0026#34;] print(\u0026#34; \u0026#34;.join(Test)) # This is Sample 14 Repeat string multiple times Same like nos the strings can be multiplied to generate multiple string\nword = \u0026#34;Sample\u0026#34; print(word*3) # SampleSampleSample 15 Search for multiple prefixes in a string The startswith() and endswith() method can be passed with multiple patterns of substrings to check if it is present.\n\u0026#34;sample\u0026#34;.startswith((\u0026#34;sam\u0026#34;,\u0026#34;Sam\u0026#34;)) # True \u0026#34;sample\u0026#34;.endswith((\u0026#34;ple\u0026#34;,\u0026#34;ple.\u0026#34;)) # True 16 Splitting a sentence to word The split() method can be used to split a sentence to multiple words to form a list\n\u0026#34;This is a Sample\u0026#34;.split() # [\u0026#39;This\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;Sample\u0026#39;] 17 Find the frequent word in a sentence The word which occurs most times in a sentence can be found using the below trick\nsentence = \u0026#34;She was young the way an actual young person is young\u0026#34; split_sentence = sentence.split() most_frequent_word = max(set(split_sentence),key=split_sentence.count) # \u0026#39;young\u0026#39; 18 Find how many occurences of words in a sentence The below trick helps in finding, how many times the word is present in the sentence sorted by the increasing rate of word occurence.\nfrom collections import Counter sentence = \u0026#34;She was young the way an actual young person is young\u0026#34; split_sentence = sentence.split() Counter(split_sentence) # Counter({\u0026#39;young\u0026#39;: 3, \u0026#39;She\u0026#39;: 1, \u0026#39;was\u0026#39;: 1, \u0026#39;the\u0026#39;: 1, \u0026#39;way\u0026#39;: 1, \u0026#39;an\u0026#39;: 1, \u0026#39;actual\u0026#39;: 1, \u0026#39;person\u0026#39;: 1, \u0026#39;is\u0026#39;: 1}) 19 Convert all the words to capital in a sentence The map() method can be used to make all words to capital letters.\nsentence = \u0026#34;Quick brown fox\u0026#34;.split() list(map(str.capitalize,sentence)) # [\u0026#39;Quick\u0026#39;, \u0026#39;Brown\u0026#39;, \u0026#39;Fox\u0026#39;] 20 Remove duplicate words in a sentence Duplicate words in a sentence can be removed has shown below\nsentence = \u0026#34;The sound sounds sound\u0026#34;.split() list(set(sentence)) # [\u0026#39;sound\u0026#39;, \u0026#39;The\u0026#39;, \u0026#39;sounds\u0026#39;] 21 Remove duplicate words retain the sentence order The below trick removes the duplicate word keeping the order of words in the sentence.\nfrom collections import OrderedDict sentence = \u0026#34;The sound sounds sound\u0026#34;.split() list(OrderedDict.fromkeys(sentence).keys()) # [\u0026#39;The\u0026#39;, \u0026#39;sound\u0026#39;, \u0026#39;sounds\u0026#39;] 22 Reversing a sentence The reverse() method can be used to reverse a sentence\nsentence = \u0026#34;This is Sample\u0026#34;.split() sentence.reverse() print(sentence) # [\u0026#39;Sample\u0026#39;, \u0026#39;is\u0026#39;, \u0026#39;This\u0026#39;] 23 Splitting words to multiple string The below trick can be used to split a sentence into multiple words and storing in a string variable.\nsentence = \u0026#34;This is Sample\u0026#34;.split() first_word, second_word, third_word = sentence print(first_word) print(second_word) print(third_word) 24 Combine list using zip() method The zip() method can be used to combine two seperate list of strings.\nName = [\u0026#39;Tom\u0026#39;, \u0026#39;Marry\u0026#39;, \u0026#39;Jon\u0026#39;] Age = [\u0026#39;35\u0026#39;, \u0026#39;30\u0026#39;, \u0026#39;40\u0026#39;] for Name, Age in zip(Name,Age): print(Name,Age) ### Output ### Tom 35 Marry 30 Jon 40 25 Sort words in a list using sorted() method The sorted() method can be used to sort the list of strings.\nsorted([\u0026#39;string1\u0026#39;,\u0026#39;string2\u0026#39;,\u0026#39;string3\u0026#39;],reverse=True) # [\u0026#39;string3\u0026#39;, \u0026#39;string2\u0026#39;, \u0026#39;string1\u0026#39;] "},{"id":48,"href":"/dit9a/gameDesign/01gettingStarted/fileStructure/","title":"Structuring your files","parent":"Getting started","content":"Each of your projects should live in its own folder somewhere sensible (like in a Digital Tech folder in your OneDrive!).\nDigital Tech/ │ ├── firstGame/ │ └── game.py │ ├── secondGame/ │ └── game.py │ ├── thirdGame/ │ └── game.py │ └── fourthGame/ └── game.py Within each of those folders, there will be python file with your game code in it, but there may well be other files and folders as well. Here is an example of a more complex project:\nmyGame/ ├── game.py │ ├── images/ │ ├── someImage.jpg │ ├── anotherImage.jpg │ └── ... # sprites, tiles and other image files │ ├── fonts/ │ └── ... # any font files │ ├── sounds/ │ └── ... # any sound files │ └── music/ └── ... # any music files You don\u0026rsquo;t need to have those folders unless you have something to put in them.\nCheck your version of Mu\nIf you are using a version of Mu older than 1.1.0-alpha.2, the shortcut buttons in Pygame Zero mode (Images, Sounds, Fonts and Music) will open folders in Mu\u0026rsquo;s default save location. If you have saved your project in a different location (like your OneDrive) you won\u0026rsquo;t be able to use these shortcut buttons, as they won\u0026rsquo;t open the right folders.\nFrom 1.1.0-alpha.2 onwards, the buttons will open folders relative to the file you have open, so they will always work, regardless of where you save your game file.\n"},{"id":49,"href":"/dit9a/gameDesign/inspiration/StuntCopter/","title":"StuntCopter","parent":"Inspiration","content":"by Duane Blehm (1986)\nPart of the genius of this game is how simple it is. Your aim is to drop people out of a helicopter onto the cart, carefully avoiding the rider and the horse. The further up you drop from, the more points you get. See what happens when you drop someone through the clouds\u0026hellip;\nIf you go to Options \u0026gt; OffScreen in the menu, you can also see the complete sprite sheet for the game; a nice touch.\n"},{"id":50,"href":"/dit9a/tags/","title":"Tags","parent":"9 Digital Tech","content":""},{"id":51,"href":"/dit9a/glossary/URLs/","title":"URLs","parent":"Glossary","content":" \\[\\overbrace{\\text{https}}^{\\text{scheme}}\\text{://} \\overbrace{\\text{tmcdigitech.github.io}}^{\\text{address}} \\text{:}\\overbrace{\\text{8080}}^{\\text{port}} \\overbrace{\\text{/dit10a/glossary/URLs/}}^{\\text{path/endpoint}}\\] The scheme tells the browser how it will connect to the server. This is typically https, but could also be http, ftp, mailto, or any number of others.\nThe address tells the browser where to send the request, i.e. which address. Addresses can be in the form of domain names like google.com, or IP addresses like 192.168.0.1.\ngoogle.com is like saying Thomas More College. 192.168.0.1 is like saying 35 Amsterdam Crescent, Salisbury Downs. localhost is a special value which refers to your own machine. If your server is set to listen to localhost it won\u0026rsquo;t be visible to any other computer at all, which is very useful for developing and testing code which is incomplete and potentially buggy. The path/endpoint tells the browser what to ask the server for, and the server will return the appropriate response based on the path. A path can be as simple as /, or considerably more complicated.\n"}]