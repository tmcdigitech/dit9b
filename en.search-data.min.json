[{"id":0,"href":"/dit9b/relief/","title":"RELIEF LESSON","parent":"9 Digital Tech","content":"Monday T2.9 (4 July)\nThis morning you should work through the challenges 1-7 in Task 1, which are on Sequence.\nSome of you did these last semester, but in Python. This time you\u0026rsquo;ll need to do them in C#, and you will find it instructive to compare the code from the two languages.\nYou should write these programs using .NET Fiddle. As you finish each one and have tested it successfully, copy the completed code into a new file in Visual Studio Code and save it into a folder named task1 in your Digital Tech folder. Give each one a name according to the number of the exercise: number 1 will be ex1.cs, number 2 will be ex2.cs, and so on.\nTo help you with the structure and specifics of C#, here is the complete code for exercise 2:\nusing System; public class Program { public static void Main() { Console.WriteLine(\u0026#34;What is your first name?\u0026#34;); string firstname = Console.ReadLine(); Console.WriteLine(\u0026#34;What is your surname?\u0026#34;); string surname = Console.ReadLine(); Console.WriteLine(surname+\u0026#34; \u0026#34;+firstname); } } A couple of useful notes:\n.NET Fiddle provides you with the necessary code to get started. You should leave the surrounding code in place, and only change the bits inside the Main() function, which initially is the line with \u0026ldquo;Hello World\u0026rdquo; in it. notice that statements must end with a semicolon (;), as in the example .NET Fiddle begins with you need to declare variables before you use them the first time (as in the example above, where we put \u0026ldquo;string\u0026rdquo; before the name of the variables firstname and surname in their first use). If you write to them a second time, you don\u0026rsquo;t need to declare their type again. If you need to convert a string into an integer, which has the type int, you can use the function int.Parse(\u0026quot;32\u0026quot;), where you replace the string \u0026quot;32\u0026quot; with the variable you want to interpret as a number. For example, this code will read in a number from the console and print out double that number: using System; public class Program { public static void Main() { Console.WriteLine(\u0026#34;What is your favourite whole number?\u0026#34;); int number = int.Parse(Console.ReadLine()); number = number*2; Console.WriteLine(\u0026#34;Double that number is \u0026#34;+number+\u0026#34;.\u0026#34;); } } "},{"id":1,"href":"/dit9b/assessment/","title":"Assessment Tasks","parent":"9 Digital Tech","content":""},{"id":2,"href":"/dit9b/deepSpace/01createProject/","title":"1: Create project","parent":"Ex 2: Deep Space","content":"\nMake sure you choose 2D for your template. The new project may take a few minutes to create.\n"},{"id":3,"href":"/dit9b/assessment/progCheckpoint/sequence/","title":"Sequence","parent":"1: Programming Checkpoints","content":"from The Computing Zone\n1. Three in, three out Write a program that will allow a user to enter their name (string), their age (integer) and their favourite TV program (string). The program will then display the information entered and some additional text on separate lines. An example of the input and output from the program is shown below. What is your name? \u0026gt; Lister What is your age? \u0026gt; 39 What is your favourite TV program? \u0026gt; Red Dwarf Lister is 39 years old and likes Red Dwarf 2. Name swapper Write a program that will ask the user to type in their first name and surname. The program will then display the two names in reverse order. What is your first name? \u0026gt; David What is your surname? \u0026gt; Tennant Tennant David 3. Three in, three out (formatted) Now edit program 1 so that the information entered is displayed differently as shown in the output box below. Note - your output will now have to display variables and text together. What is your name? \u0026gt; Lister What is your age? \u0026gt; 39 What is your favourite TV program? \u0026gt; Red Dwarf Lister 39 Likes watching Red Dwarf 4. Area of a rectangle Ask your user to enter the length and width of a rectangle. Your program should calculate the area of the rectangle (length*width) and display the result with a suitable message. Please enter the following values in cm. Please enter the length of the rectangle. \u0026gt; 12 Please enter the width of the rectangle. \u0026gt; 6 The area of the rectangle is: 72 square centimetres 5. Area of a circle Ask your user to enter the radius of a circle. Your program should use what they have entered to calculate the area of the circle (pi*radius*radius) and display the result. Please enter the following values in cm. Please enter the radius of the circle. \u0026gt; 16 The area of the circle is: 803.84 square centimetres 6. Number cruncher Write a program that inputs two individual integers between 0 and 9. The program should then combine the inputs to form a single number in a third variable. The program should show the equation of multiplying the three numbers together and the result, as shown in the example. Enter the first number (0-9). \u0026gt; 2 Enter the second number (0-9). \u0026gt; 3 2 x 3 x 23 = 138 7. Address formatter A program is required to format and store a users address in a single string. The user should be asked these questions:\nWhat is your house number? What is the name of your street? What suburb/town do you live in? What is your postcode?\nThe program will then combine the user\u0026rsquo;s answers in a single string, formatted as shown in the example. The program will display the string on the screen.\nWhat is your house number? \u0026gt; 13 What is the name of your street? \u0026gt; Aberlove Drive What suburb/town do you live in? \u0026gt; Buckhaven What is your postcode? \u0026gt; 4039 13 Aberlove Drive BUCKHAVEN 4039 8. Super smart name swapper (extension) Ask the user to enter their full name on one line, and display their name in reverse order. What is your full name? \u0026gt; David Tennant Tennant David "},{"id":4,"href":"/dit9b/deepSpace/02getSomeAssets/","title":"2: Get some assets","parent":"Ex 2: Deep Space","content":"We need some objects to go in our game. In this example, we\u0026rsquo;ll use assets from kenney.nl\u0026rsquo;s asset pack Space Shooter Redux.\nWe need:\nships (us and them) asteroids (we\u0026rsquo;re going large, medium, small) powerups/tokens laser blast explosions Here are the assets we\u0026rsquo;ll use:\nDownload your assets, and then drag them into the assets panel at the bottom of the Unity screen.\n"},{"id":5,"href":"/dit9b/assessment/progCheckpoint/selection/","title":"Selection","parent":"1: Programming Checkpoints","content":"from The Computing Zone\n9. Advice please Write a program that asks the user if they would like some advice. If they enter Y, provide them with an amusing message. Would you like some advice? \u0026gt; Y Always know where your towel is. Would you like some advice? \u0026gt; N 10. Darts During a game of darts, the highest score that can be achieved in a single turn is 180. The lowest is 0. Write a program that will allow a dart player to enter their score. The program should congratulate the player if their score was over 100. If the player scores less than 10 they should be told that some practice is required. Please enter your score: \u0026gt; 125 What a great score! Well done. Please enter your score: \u0026gt; 7 That was rubbish. Get practising! 11. Charity Collection Three friends have been collecting money for charity. A local company has offered to double the amount of money they collect if they raise over $1000. Write a program that allows the friends to enter their individual amounts. The program should then add the three amounts and store the total. If the total is greater or equal to $1000 the total should be doubled. Finally the total should be displayed. Enter the first amount raised. \u0026gt; 398 Enter the second amount raised. \u0026gt; 193 Enter the third amount raised. \u0026gt; 478 A total of $1069 was raised. This will be doubled to $2138. 12. Solid, Liquid, Gas At normal atmospheric pressure, water is a solid at or below 0°C, a gas above 100°C, and a liquid in the middle. Write a program that will return solid, liquid or gas to the user depending on the temperature they enter. Enter the current temperature. \u0026gt; 78 At 78°C, water will be a liquid. "},{"id":6,"href":"/dit9b/deepSpace/03unityInterface/","title":"3: Understand the Unity UI","parent":"Ex 2: Deep Space","content":"Drag the sprite (image) for your player ship into the Scene to create the GameObject for your player.\nThe white rectangle shows what is visible on the main camera, whose location is shown by the camera image in the centre of the scene. The main camera is what will appear on our screen, so for our basic example, anything inside that white rectangle will be visible on screen, and anything outside will not be.\nYou will see that the scene\u0026rsquo;s Hierarchy now shows both the main camera and your new player object (which will have a silly name based on the name of the image file).\nAs the player object is selected, you\u0026rsquo;ll see it highlighted in both the hierarchy and the scene, and the Inspector panel will show all the relevant information for the selected object.\n"},{"id":7,"href":"/dit9b/assessment/progCheckpoint/iteration/","title":"Iteration","parent":"1: Programming Checkpoints","content":"from The Computing Zone\n13. Lines cheat A naughty pupil has been given lines to copy as a punishment from their Computing teacher. The have been asked to type out “I must not behave like muppet in class” 20 times. Write a program that asks a pupil to enter a sentence. The same sentence should then be displayed 20 times. What sentence would you like copied? \u0026gt; I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. 14. Cricket over In cricket a bowler bowls 6 balls at a time. This is called an over. Each ball bowled may be hit by the batter who may score some runs. Write a program that allows the runs from an over to be entered (for example: 0, 2, 0, 0, 4, 6). The total scored in that over should then be displayed. Please enter the runs for each ball: \u0026gt; 0 \u0026gt; 2 \u0026gt; 0 \u0026gt; 0 \u0026gt; 4 \u0026gt; 6 This over\u0026#39;s score was 12. 15. Flexible cheater The naughty pupil forgot to hand their lines in and now has more to do. Adapt program 13 to allow the pupil to select how many lines the program produces. What sentence would you like copied? \u0026gt; I must not behave like a muppet in class. How many times would you like it copied? \u0026gt; 7 I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. I must not behave like a muppet in class. 16. Charity drive The following year the three friends recruit many more charity raisers. Adapt program 11 to repeatedly ask for the next amount of money raised. If the user types a number, that number is added to the total and the program asks again. If the user just presses Enter, with nothing else, the program stops asking and displays the total raised, including the doubled value if appropriate. Enter the total raised by each person: \u0026gt; 238 \u0026gt; 624 \u0026gt; 546 \u0026gt; 333 \u0026gt; 651 \u0026gt; 174 \u0026gt; A total of $2566 was raised. This will be increased to $4566. 17. Password The program should give the user an error message if they enter the wrong password. A message “Entry gained!” should be displayed when the password is entered correctly. Please enter the password. \u0026gt; snool Sorry, Incorrect! Try again. Please enter the password. \u0026gt; giraffe Sorry, Incorrect! Try again. Please enter the password. \u0026gt; sesame Entry gained! 18. No more presents You have money to spend on your birthday. Write a program that will ask you what you have to spend, and then to enter the price of each present you want until your total reaches or is over the amount you started with. The program should produce the output shown. How much money did you get? \u0026gt; 200 You have $200. Price of next item: \u0026gt; 35 You have $165. Price of next item: \u0026gt; 100 You have $65. Price of next item: \u0026gt; 50 You have $15. Price of next item: \u0026gt; 45 You have overspent! You can\u0026#39;t afford the $45 item. How much money did you get? \u0026gt; 48 You have $48. Price of next item: \u0026gt; 48 You have spent all $48! 19. Guess the number A game is created where a user is required to guess an unknown number between 1 and 100 (inclusive). Each time the user guesses the program informs them if their guess is too high, too low or correct. The guessing game only finishes when the user’s guess matches the unknown number. I\u0026#39;m thinking of a number between 1 and 100. Which number do you think it is? 45 Your guess is too low. Try again. 86 Your guess is too high. Try again. 67 Your guess is too high. Try again. 50 Your guess is too low. Try again. 54 Your guess is too high. Try again. 52 Correct! I was thinking of 52. 20. Dance group (extension) You have been asked to write a program to store the names and ages of competitors in a dance competition. The program should display the name of the competitor and which level of competition they should be entered in. ‘Junior’ competitors are less than 12 years old, ‘Senior’ competitors are at least 18 years old. ‘Intermediate’ competitors are aged 12-17. Please enter a name: \u0026gt; Jean Gray Please enter Jean Gray\u0026#39;s age: \u0026gt; 13 Please enter a name: \u0026gt; Robert Drake Please enter Robert Drake\u0026#39;s age: \u0026gt; 24 Please enter a name: \u0026gt; Scott Summers Please enter Scott Summers\u0026#39;s age: \u0026gt; 15 Please enter a name: \u0026gt; Anna LeBeau Please enter Anna LeBeau\u0026#39;s age: \u0026gt; 9 Please enter a name: \u0026gt; Names and competition list: Jean Gray - Intermediate Robert Drake - Senior Scott Summers - Intermediate Anna LeBeau - Junior "},{"id":8,"href":"/dit9b/deepSpace/04usingTheInspector/","title":"4: Use the inspector","parent":"Ex 2: Deep Space","content":"The inspector panel shows information about a selected GameObject, including all its components.\nYou can adjust values in the inspector by:\ntyping values directly in an input field dragging up/down or left/right on input field\u0026rsquo;s text label, dragging an object from the hierarchy or assets panes onto a reference field (the fields with a little \u0026ldquo;target\u0026rdquo; at the right) The dragging a label option can be really handy for working out approximately what the value for some property should be, before choosing a specific value for it.\nGo ahead and rename your player ship to player now. Also, tag the player as a \u0026ldquo;Player\u0026rdquo; using the Tag menu underneath the name field.\nAll GameObjects have a transform component, which manages the position, rotation and scale of the object. Try dragging on the \u0026ldquo;X\u0026rdquo; of the position property, and watch as the ship moves left and right. Similarly try dragging the Z of the rotation to see the ship turn around.\nNext to the scale is a little chain, which either locks the scales or leaves them independent. If there is a line through the chain, the chain is broken, and you can scale the three dimensions independently. If the chain is active then as you double the X scale, for example, the Y and Z scales will double also. This maintains the aspect ratio of the object, which is an import part of its look. Generally, you should not change the aspect ratio of anything unless you are really sure what you\u0026rsquo;re doing.\nAt the bottom of the inspector is the Add Component button, for adding additional components. We will use that now.\n"},{"id":9,"href":"/dit9b/deepSpace/05addingComponents/","title":"5: Add components","parent":"Ex 2: Deep Space","content":"Using the Add Component button, add a Rigidbody2D and a BoxCollider2D component:\nPhysics 2D \u0026gt; Rigidbody 2D to add the Rigidbody2D component, and Physics 2D \u0026gt; BoxCollider 2D to add a BoxCollider2D component. The Rigidbody component exposes the object to the Physics engine, allowing forces to operate on it. If you press the play button above your scene now, you will see that the force of gravity causes your ship to fall off the bottom of the screen. Press play again to stop.\nA note of caution: you can use the Inspector to modify your game while it is playing, and this can be very handy for quickly trying things on the go, but any changes you make while the game is running will be lost when you stop it. So make sure that your game is stopped before you do anything you\u0026rsquo;re planning to keep. Colliders are used to detect when objects collide with one another. The simplest (and fastest for the computer) is the BoxCollider2D, but there are other 2D and 3D colliders which may better match the shape of your sprite.\n"},{"id":10,"href":"/dit9b/deepSpace/06gettingMoving/","title":"6: Get the player moving","parent":"Ex 2: Deep Space","content":" Disable gravity At the moment our player moves, but only because of gravity, and there isn\u0026rsquo;t a lot of gravity in space. So let\u0026rsquo;s turn that off. In the menu bar, go to Edit \u0026gt; Project Settings, choose Physics 2D from the sidebar, and set the Y value of Gravity to zero (0).\nCreate player script With your player\u0026rsquo;s game object selected, from the inspector choose Add component. In the search field, type \u0026ldquo;Player\u0026rdquo;, and then choose New script, and then Create and Add.\nYou will see the player script appears in the Assets panel, and if you look near the bottom of the Inspector for your player object, you\u0026rsquo;ll see an entry labelled \u0026ldquo;Player (Script)\u0026rdquo;. We\u0026rsquo;ll be coming back to this many times.\nIf you haven\u0026rsquo;t already, you should go to Edit \u0026gt; Preferences, choose External Tools, and make sure that the External Script Editor option is set to Visual Studio Code, not Open by file extension. Double click the player script in the assets panel to open it for editing.\nTurning \u0026amp; moving (The full code is at the end of this page.)\nThe script will already contain some basic code. It will call for some standard library parts (lines 1-2) and the main Unity code library (line 3). The rest of the file defines a class. You don\u0026rsquo;t need to know anything particularly about classes to get by here, but\u0026hellip;\nIt it is vital that the name of the class (the word after \u0026ldquo;public class\u0026rdquo;) exactly matches the file name. If you ever rename the file or the class, you need to adjust the other to match. We will declare a couple of variables for the class:\nrotSpeed, (rotation speed) a tunable number to adjust how quickly we can turn; linSpeed, (linear speed) a tunable number to adjust how quickly we can change our speed; rb, a reference to a Rigidbody2D component, which we will use to interact with the physics engine. In the Start() method, we wire up our rb variable to the player object\u0026rsquo;s Rigidbody2D component.\nIn the Update() method, we have a one line bit of code which uses the Horizontal axis input to adjust the rotation of the player object. The rest of that code increases or decreases the velocity depending on the Vertical axis input. On a keyboard, the inputs are WASD and the arrow keys.\nUnity is often very slow to notice changes to scripts. After you\u0026rsquo;ve saved the changes to your scripts, head back to Unity and hit Ctrl-R (shortcut for Assets \u0026gt; Refresh) to force Unity to recompile and update your scripts. Once you\u0026rsquo;ve done that, you\u0026rsquo;ll notice that the Player (Script) section has sprouted two new lines, for the rotSpeed and linSpeed variables. This is because they were declared public, which means they are visible to other components. (The rb variable, by contrast, is private, so is not visible.) You will need to set these to non-zero values or your ship won\u0026rsquo;t move. Start with these:\nrotSpeed = 1000 linSpeed = 5 and tune them to your preference.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { public float rotSpeed; public float linSpeed; private Rigidbody2D rb; // Start is called before the first frame update void Start() { rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); } // Update is called once per frame void Update() { //Update rotation rb.MoveRotation(rb.rotation - Input.GetAxis(\u0026#34;Horizontal\u0026#34;) * rotSpeed * Time.deltaTime); //Update velocity Vector3 pos = transform.position; float y = Input.GetAxis(\u0026#34;Vertical\u0026#34;) * linSpeed * Time.deltaTime; Vector2 vChange = new Vector2(0, y); vChange = transform.rotation * vChange; rb.velocity += vChange; } } "},{"id":11,"href":"/dit9b/deepSpace/07asteroids/","title":"7: Add asteroids","parent":"Ex 2: Deep Space","content":"Let\u0026rsquo;s add some asteroids. Since asteroids are all broadly alike, it\u0026rsquo;d be great if there was a way to set up one up with all the components and scripts we need and then just clone it, and there is: prefabs!\nDrag one the large meteor image into the scene, and rename it asteroidLarge. In the tag menu, select \u0026ldquo;Add tag\u0026rdquo;. Under \u0026ldquo;tags\u0026rdquo;, it will say \u0026ldquo;List is empty\u0026rdquo;. Click on the + at the right end of that box, and enter \u0026ldquo;Asteroid\u0026rdquo; and hit Save.\nNow click on your asteroid in the scene (or hierarchy) and you should now be able to tag the asteroid as an Asteroid.\nGive it a Rigidbody2D and CircleCollider2D component.\nIf you run your game now, you should be able to push the asteroid around with your ship.\nTo make a prefab from your asteroid, drag the asteroidLarge entry from the hierarchy back down into the Assets panel. The asteroidLarge should now have a blue filled icon, rather than the black outline one the other objects have. This indicates it is a prefab. The new prefab in the assets panel will have a grey background around the sprite and, if you select it, the inspector will show it is a Prefab Asset.\nYou can drag your prefab asteroid into the scene to create more copies of it. Do that now, so you have six or so asteroids.\nNow if you run your game you can knock one asteroid into another.\n"},{"id":12,"href":"/dit9b/deepSpace/08screenWrapping.md/","title":"8: Wrap the screen","parent":"Ex 2: Deep Space","content":" Player Asteroids At the moment, once an asteroid (or your ship) disappears off the edge of the screen, it will continue moving forever and you\u0026rsquo;ll likely never find it again. In some games you might choose to attach the camera to the player so you can move around and keep the player on the screen, but in this case we\u0026rsquo;re going to wrap the screen: when the player moves off one edge, they\u0026rsquo;ll reappear on the other.\nPlayer To do that, we add some more code to the Update() method of the player script. The margin property we use in this code can be tuned according to preference. The object must go past the edge of the margin, not just the screen, to be teleported to the other edge. The value used in this example, 50, seems to work okay, but feel free to play around.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { public float rotSpeed; public float linSpeed; private Rigidbody2D rb; // Start is called before the first frame update void Start() { rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); } // Update is called once per frame void Update() { //Update rotation rb.MoveRotation(rb.rotation - Input.GetAxis(\u0026#34;Horizontal\u0026#34;) * rotSpeed * Time.deltaTime); //Update velocity Vector3 pos = transform.position; float y = Input.GetAxis(\u0026#34;Vertical\u0026#34;) * linSpeed * Time.deltaTime; Vector2 vChange = new Vector2(0, y); vChange = transform.rotation * vChange; rb.velocity += vChange; //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } } Asteroids We can also add screen wrapping for our asteroids. Make a new script for our asteroids by selecting the prefab asteroid asset and choosing Add component from the inspector. Type \u0026ldquo;Asteroid\u0026rdquo; into the search bar, and choose New Script and press Enter, as you did for the player script.\nOpen the new Asteroid script and add just that new screen wrapping code to the Asteroid Update() method.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } } Refresh your assets and run your game; everything should wrap correctly now.\n"},{"id":13,"href":"/dit9b/deepSpace/09randomMovement/","title":"9: Move asteroids","parent":"Ex 2: Deep Space","content":"Having the asteroids hang in space as they do looks a litle unrealistic, so let\u0026rsquo;s add some code to the Start() method to give them some initial movement.\nThe first part chooses a random angle from 0 to 360, and sets the z-axis rotation to that angle.\nThe second part chooses a random speed from 0.5 to 2. It then creates a vector pointing up (positive-y) which is the natural forward direction, and then rotates that vector to match the rotation of the asteroid.\nBecause this code is attached to the prefab, by changing it we change the prefab and hence all the asteroids together. Cool, huh?\nAsteroids not moving? Do you need to refresh your assets? (Ctrl-R) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { // Start is called before the first frame update void Start() { Rigidbody2D rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); //Choose a random angle float angle = Random.Range(0f, 360f); this.transform.rotation = Quaternion.Euler(0, 0, angle); //Choose a random speed float speed = Random.Range(0.5f, 2f); Vector3 s = new Vector3(0, speed, 0); rb.velocity = transform.rotation * s; } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } } "},{"id":14,"href":"/dit9b/deepSpace/10gun/","title":"10: Make a gun","parent":"Ex 2: Deep Space","content":"Let\u0026rsquo;s make a gun. Our gun will be slightly odd, in that it won\u0026rsquo;t be attached directly to the ship. Instead, the thing we\u0026rsquo;re going to build will be invisible, and sit just in front of the ship. When we press the fire button (left Ctrl by default), our player will generate a laser blast at the location of the gun, which will then travel forward at speed.\nWe need to make sure that the gun object is a \u0026ldquo;child\u0026rdquo; object of the player, so that the gun is attached to the player and moves as the player moves. Right click on the player in the hierarchy, and choose 2D Object \u0026gt; Sprites \u0026gt; Square.\nYou\u0026rsquo;ll notice that there is a new object called Square and it is nested inside your player. Your player object now has a little arrow you can click on which will show and hide its children. Rename your Square \u0026ldquo;gun1\u0026rdquo;.\nBecause the gun is a child of the player, its coordinate system is defined relative to the player, not to the world coordinate system. You\u0026rsquo;ll notice that the coordinates for the gun are currently (0, 0, 0) and that puts it right on top of your ship.\nUse the transform panel to set the scale of your gun to: (0.1, 0.5, 1). It should now be a long thin rectangle down the centre axis of the ship. Adjust the Y position until the gun is just out the front of the ship. We\u0026rsquo;ve set ours to 0.75. Your ship and gun should look similar to the image below.\nWe are not going to add any components to our gun\u0026mdash;no colliders or Rigidbody\u0026mdash;so it won\u0026rsquo;t affect anything else in the game; it\u0026rsquo;s as if it isn\u0026rsquo;t there at all. And we can now turn off the Sprite Renderer by unchecking the box next to the component\u0026rsquo;s title, and it will be completely invisible.\n"},{"id":15,"href":"/dit9b/pyToCs/inputOutput/","title":"Basic input and output","parent":"From Python to C-sharp","content":" Output Python print(\u0026#34;Some text\u0026#34;) C# Console.WriteLine(\u0026#34;Some text\u0026#34;) To print to the console in Python, we use the print() function. In C#, console functions are part of the Console class, and the equivalent to Python\u0026rsquo;s print function is Console.WriteLine(). If you don\u0026rsquo;t want it to automatically add a line break, you can use the Console.Write() function.\nInput Python response = input(\u0026#34;What is your name? \u0026#34;) C# Console.WriteLine(\u0026#34;What is your name? \u0026#34;) response = Console.ReadLine(); Python\u0026rsquo;s input() function takes a parameter which is printed, like a question, before reading in the response from the user. C#\u0026rsquo;s equivalent, Console.ReadLine(), only offers a generic prompt: \u0026gt; . So in order to ask a question or provide information to the user about what they should be entering, you will need to add one or more Console.WriteLine() commands before you read in the user\u0026rsquo;s response.\n"},{"id":16,"href":"/dit9b/basics/UFO/","title":"UFO assets","parent":"Ex 1: Alien rescue","content":" Name Image UFO Alien "},{"id":17,"href":"/dit9b/deepSpace/11laserBlastPrefab/","title":"11: Make a laser blast","parent":"Ex 2: Deep Space","content":"We now need to make our laser blast. Grab the laser blast you chose (ours is green) and drag it into the scene to make a new game object. Call it \u0026ldquo;playerBlast\u0026rdquo;. As you did for the asteroids, make a tag called \u0026ldquo;LaserBlast\u0026rdquo; and tag your new playerBlast.\nWhile we\u0026rsquo;re setting things up, go ahead and add a BoxCollider2D and a Rigidbody2D.\nNow turn your playerBlast into a prefab (drag it from the hierarchy down into the Assets panel). Since we don\u0026rsquo;t want a random green blast in the middle of the scene, select the blast in the scene and delete it.\nWe can now edit the Player script and add the firing code.\nFirst, on line 10 we add a variable which will point to the object we want to create when we hit the fire button.\nSecondly, at the end of the Update() method, we add the code that handles the firing. We check to see if the Fire1 button (left Ctrl on the keyboard, by default) has just been pressed and, if so, get a reference to our \u0026ldquo;gun1\u0026rdquo;. Note that the name of the gun in quotes must exactly match what you called the gun in Unity when you made it. This is why you don\u0026rsquo;t want to leave it called Square! We now Instantiate (create an instance of) our desired firing object at the same location and rotation as the gun. Finally, we give the blast a brief kick with a strong force, and off it goes.\nOnce you have copied the code in and updated it, you\u0026rsquo;ll see that the player has a new variable in the inspector called Projectile Template. Drag your playerBlast prefab onto that reference field.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { public float rotSpeed; public float linSpeed; private Rigidbody2D rb; public GameObject projectileTemplate; // Start is called before the first frame update void Start() { rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); } // Update is called once per frame void Update() { //Update rotation rb.MoveRotation(rb.rotation - Input.GetAxis(\u0026#34;Horizontal\u0026#34;) * rotSpeed * Time.deltaTime); //Update velocity Vector3 pos = transform.position; float y = Input.GetAxis(\u0026#34;Vertical\u0026#34;) * linSpeed * Time.deltaTime; Vector2 vChange = new Vector2(0, y); vChange = transform.rotation * vChange; rb.velocity += vChange; //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); //Handle fire button if( Input.GetButtonDown(\u0026#34;Fire1\u0026#34;) ){ GameObject gun1 = GameObject.Find(\u0026#34;gun1\u0026#34;); GameObject blast = Instantiate(projectileTemplate, gun1.transform.position, gun1.transform.rotation) as GameObject; blast.GetComponent\u0026lt;Rigidbody2D\u0026gt;().AddRelativeForce(new Vector2(0, 800)); } } } "},{"id":18,"href":"/dit9b/deepSpace/12laserCollisions/","title":"12: Handle blast collisions","parent":"Ex 2: Deep Space","content":"You can see you can shoot laser blasts, and they collide with the asteroids, causing them to move. They also then bounce off in a weird way that makes them look more like shards of coloured ice than laser blasts!\nFirstly, go to your playerBlast prefab (in the Assets panel). In its collider component, turn on the \u0026ldquo;Is Trigger\u0026rdquo; option. This turns the blast from a physical object that collides into more of a \u0026ldquo;magic region\u0026rdquo; that things can pass through. Imagine the finish line of a race track: you want to be alerted when things cross into and out of it still, but you don\u0026rsquo;t want them to bounce off.\nNow let\u0026rsquo;s open the Asteroid script and write some code to react to the blasts.\nWe need to write a method called OnTriggerEnter2D(), which will be called whenever the collider of the object (one of the asteroids) overlaps the collider of a trigger (for example, a laser blast). In it, we check to see if the thing that we\u0026rsquo;ve run over has the tag LaserBlast and, if so, we destroy both it and us.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { // Start is called before the first frame update void Start() { Rigidbody2D rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); //Choose a random angle float angle = Random.Range(0f, 360f); this.transform.rotation = Quaternion.Euler(0, 0, angle); //Choose a random speed float speed = Random.Range(0.5f, 2f); Vector3 s = new Vector3(0, speed, 0); rb.velocity = transform.rotation * s; } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } void OnTriggerEnter2D(Collider2D other) { if( other.gameObject.CompareTag(\u0026#34;LaserBlast\u0026#34;) ){ Destroy(this.gameObject); Destroy(other.gameObject); } } } "},{"id":19,"href":"/dit9b/deepSpace/13limitLaserLife/","title":"13: Limit laser life","parent":"Ex 2: Deep Space","content":"If you\u0026rsquo;re not a particularly accurate shot, those laser blasts you fire will continue to travel for ever, until the scene is unloaded (either due to changing the scene or quitting the game). This feels untidy and, in a big game, can cause resources to be tied up and used on things which aren\u0026rsquo;t relevant anymore. Let\u0026rsquo;s use the same idea used to handle screen wrapping to destroy the laser blasts once they reach the edge of the screen.\nMake a script for your laser blasts, called LaserBlast.\nIn the Update() method, we\u0026rsquo;ll get the laser blast\u0026rsquo;s screen position from the main camera, and check it. The || symbol (two vertical bars next to each other) means \u0026ldquo;or\u0026rdquo;, so it says that if the blast has gone off the right edge or the left edge or the bottom edge or the top edge, then destroy it.\nIf you play the game in window mode so you can see the hierarchy, you should see blasts appear in the hierarchy as you fire them, and then disappear again once they reach the edge of the screen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 using System.Collections; using System.Collections.Generic; using UnityEngine; public class LaserBlast : MonoBehaviour { // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { //See if we\u0026#39;ve hit the edge of the screen Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); if( screenPos.x \u0026gt; Screen.width || screenPos.x \u0026lt; 0 || screenPos.y \u0026gt; Screen.height || screenPos.y \u0026lt; 0 ){ Destroy(this.gameObject); } } } "},{"id":20,"href":"/dit9b/deepSpace/14debris/","title":"14: Make debris","parent":"Ex 2: Deep Space","content":"Here we\u0026rsquo;re going to implement \u0026ldquo;debris\u0026rdquo;. When an asteroid is destroyed, it can break into smaller pieces, which can also be destroyed (and also potentially break into pieces). In practice, we will use a combination of Destroy() and Instantiate() to remove the old asteroid and create three new ones in its place. One is in the direction of the original asteroid, and the other two are mirrored at a random angle from that direction.\nWe need a variable which shows what debris this asteroid should generate. Eventually we\u0026rsquo;ll have a prefab for medium asteroids and small asteroids, which will be copied from the large asteroid. Then we can set up a chain, so large asteroids break into mediums, mediums into smalls, and then smalls disappear to nothing.\nFor now, just to check that things are working, once you\u0026rsquo;ve got the code in and refreshed, drag the asteroidLarge prefab in as the debris reference. This means, of course, that when you destroy an asteroid, it just replaces itself with three copies, which will have problems, but we can at least check that our code works.\nIf you want some more fun here, you can try setting the debris object to a playerBlast, or make a prefab out of your player, and use that as the debris! Crazy, but the stuff of inspiration\u0026hellip; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { public GameObject debrisTemplate; private float initializationTime; // Start is called before the first frame update void Start() { Rigidbody2D rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); //Choose a random angle float angle = Random.Range(0f, 360f); this.transform.rotation = Quaternion.Euler(0, 0, angle); //Choose a random speed float speed = Random.Range(0.5f, 2f); Vector3 s = new Vector3(0, speed, 0); rb.velocity = transform.rotation * s; initializationTime = Time.timeSinceLevelLoad; } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin/2; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin/2; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin/2; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin/2; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } void OnTriggerEnter2D(Collider2D other) { if( Time.timeSinceLevelLoad - initializationTime \u0026lt; 0.5 ){ return; } if( other.gameObject.CompareTag(\u0026#34;LaserBlast\u0026#34;) ){ if( debrisTemplate != null){ // \u0026#34;!=\u0026#34; = \u0026#34;!\u0026#34; + \u0026#34;=\u0026#34; float angle = Random.Range(0f, 180f); float speed = Random.Range(5f, 10f); Vector3 s = new Vector3(0, speed, 0); GameObject a = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation) as GameObject; a.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = a.transform.rotation * s; GameObject b = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation * Quaternion.Euler(0, 0, angle)) as GameObject; b.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = b.transform.rotation * s; GameObject c = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation * Quaternion.Euler(0, 0, -angle)) as GameObject; c.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = c.transform.rotation * s; } Destroy(this.gameObject); Destroy(other.gameObject); } } } "},{"id":21,"href":"/dit9b/deepSpace/15duplicatePrefabs/","title":"15: Make debris (part 2)","parent":"Ex 2: Deep Space","content":"Select your asteroidLarge prefab and from the menubar choose Edit \u0026gt; Duplicate (Ctrl-D). Choose the copy (should have a 1 at the end of the name) and choose Open from the inspector. You can now rename it asteroidMedium. It\u0026rsquo;ll ask you if you want to rename the file or keep the old name: choose Rename File. Drag your medium sprite image into the Sprite Renderer\u0026rsquo;s sprite field. You\u0026rsquo;ll now need to adjust the Collider size: Choose \u0026ldquo;Edit Collider\u0026rdquo; in the collider panel in the inspector, and use the green knobs to adjust the size. Click the button again to stop editing.\nCongratulations, you now have medium rocks as well as big ones! You can now go to your asteroidLarge, and set its debris template to the medium asteroid.\nYou can repeat this process to create small ones as well. Whatever you decide is the smallest size, make sure it doesn\u0026rsquo;t have a debris template selected (or you\u0026rsquo;ll never be able to clear the screen). If it has one selected, click on the debris template reference field and press Delete to clear it.\n"},{"id":22,"href":"/dit9b/deepSpace/16sounds/","title":"16: Make some noise","parent":"Ex 2: Deep Space","content":"It is fairly easy to make some sound when we fire our lasers. We\u0026rsquo;ll cover some more complex examples later. To make sound you need an AudioSource, which makes sound, and an AudioListener, to hear it. By default, the main camera has an AudioListener attached, and that is perfect for our needs (it usually is, which is why it\u0026rsquo;s there).\nSelect your PlayerBlast prefab and add an Audio \u0026gt; AudioSource component. You\u0026rsquo;ll see it has a reference field called AudioClip. We need to drop our laser blast noise in there, and we\u0026rsquo;re done. Here is one you can use:\nRetro laser sound\nDownload it and add it to the assets panel. Then drag it into the reference field. Play your game and enjoy sound!\n"},{"id":23,"href":"/dit9b/deepSpace/17moreSounds/","title":"17: More sounds","parent":"Ex 2: Deep Space","content":"Let\u0026rsquo;s add a sound for when our asteroids blow up.\nYou\u0026rsquo;ll have noticed that we didn\u0026rsquo;t need any code for our LaserBlast sounds, and that might have surprised you. That\u0026rsquo;s because we got lucky, and we didn\u0026rsquo;t need to. In general, you will, and we\u0026rsquo;ll look at that now. If you look at the setup for our LaserBlast, you\u0026rsquo;ll see in the AudioSource that there is an option checked called \u0026ldquo;Play On Awake\u0026rdquo;. This says that whenver our object \u0026ldquo;wakes up\u0026rdquo;, the sound should play and since the Rigidbody component sets our LaserBlast to \u0026ldquo;Start Awake\u0026rdquo; it goes off as soon as our laser blast is constructed, which is exactly what we wanted. Job done, free of charge.\nIf we did the same though, with our asteroids, there would be three copies of the noise when our asteroids were hit, as the new smaller ones were created, or none, when the smallest are destroyed. So we need to do something different.\nIn the Asteroid script, we\u0026rsquo;ll add a variable which links to the sound clip we want to play, and then we\u0026rsquo;ll trigger it in code when we blow up an asteroid.\nRefresh your assets in Unity, and drag a suitable audio clip onto the reference field in the asteroid script for each of your asteroid prefabs. Here is one you can try:\nSuitable asteroid explosion\nThe number in the sound function is the volume, a number between 0 and 1. You can tune these so they are balanced (the laser blast in the previous step is WAAAY louder than the explosion above). For the laser blast, go to the inspector and adjust the volume there.\nYou may have noticed that the laser blast sound can be cut short sometimes. This is because in these cases the laser blast is destroyed before the sound finishes playing. If this bothers you, remove the audio source and copy the process we used here for the asteroids.\nWhat is happening with our asteroid explosions is that when we want to play the sound an AudioSource is created at the location of the asteroid, but it is not attached to the asteroid. So when the asteroid is destroyed the AudioSource is still there. The sound plays, and the AudioSource destroys itself automatically when the sound is finished.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { public GameObject debrisTemplate; private float initializationTime; public AudioClip explosionSound; // Start is called before the first frame update void Start() { Rigidbody2D rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); //Choose a random angle float angle = Random.Range(0f, 360f); this.transform.rotation = Quaternion.Euler(0, 0, angle); //Choose a random speed float speed = Random.Range(0.5f, 2f); Vector3 s = new Vector3(0, speed, 0); rb.velocity = transform.rotation * s; initializationTime = Time.timeSinceLevelLoad; } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin/2; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin/2; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin/2; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin/2; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } void OnTriggerEnter2D(Collider2D other) { if( Time.timeSinceLevelLoad - initializationTime \u0026lt; 0.5 ){ return; } if( other.gameObject.CompareTag(\u0026#34;LaserBlast\u0026#34;) ){ AudioSource.PlayClipAtPoint(explosionSound, transform.position, 1f); if( debrisTemplate != null){ // \u0026#34;!=\u0026#34; = \u0026#34;!\u0026#34; + \u0026#34;=\u0026#34; float angle = Random.Range(0f, 180f); float speed = Random.Range(5f, 10f); Vector3 s = new Vector3(0, speed, 0); GameObject a = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation) as GameObject; a.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = a.transform.rotation * s; GameObject b = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation * Quaternion.Euler(0, 0, angle)) as GameObject; b.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = b.transform.rotation * s; GameObject c = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation * Quaternion.Euler(0, 0, -angle)) as GameObject; c.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = c.transform.rotation * s; } Destroy(this.gameObject); Destroy(other.gameObject); } } } "},{"id":24,"href":"/dit9b/deepSpace/18score/","title":"18: Show the score","parent":"Ex 2: Deep Space","content":"Let\u0026rsquo;s give the user a sense of how well they\u0026rsquo;re doing; we\u0026rsquo;ll give them a point for every asteroid they shoot.\nWe\u0026rsquo;ll start by setting up the score display. Right click in the hierarchy and choose UI \u0026gt; Text - TextMeshPro.\nYou\u0026rsquo;ll likely be presented with this box:\nYou\u0026rsquo;ll need to click the \u0026ldquo;Import TMP Essentials\u0026rdquo; button to continue. If you are keen to learn more about TextMesh Pro\u0026rsquo;s features, you can click the second button as well, but if you\u0026rsquo;re just going to rely on this tutorial series, don\u0026rsquo;t worry about it, and just close the window once the essentials have been added.\nBack in your Unity window, you\u0026rsquo;ll notice that a Text (TMP) object has been added inside a Canvas in your hierarchy. There will be the corner of a large yellow box in the middle of the scene (this is the edge of the new canvas), and your Text object will be selected for editing in the Inspector.\nGo ahead and call this \u0026ldquo;scoreDisplay\u0026rdquo;. In the TextMeshPro component, replace the text \u0026ldquo;New Text\u0026rdquo; with \u0026ldquo;Destroyed: 0\u0026rdquo;.\nPlay your game, and you should see some text near the bottom left. Let\u0026rsquo;s fix this placement up. Double click on the Canvas in the hierarchy to focus on it. You will see the text is in a silly location.\nSelect your scoreDisplay object and head to the inspector.\nClick on the target-like image. This sets where the object is anchored to the canvas. We\u0026rsquo;ll anchor our score to the top left for now. By holding down Alt as we select the \u0026ldquo;top left\u0026rdquo; option, it will also position our score in the top left.\nYou should now see the score display in the top left, and the anchor (a white diagonal cross) also in the top left.\nTo go back to your game scene, double click on the Main Camera.\nNow if you play your game, you\u0026rsquo;ll see the score in the top left.\n"},{"id":25,"href":"/dit9b/deepSpace/19scoreTrack/","title":"19: Update the score","parent":"Ex 2: Deep Space","content":"Now that we\u0026rsquo;ve got a place to display the score, we need a way of managing the score. The most flexible way to handle this is to make a game object whose job is to manage aspects of the game. A GameManager!\nIn the hierarchy, create an empty game object (right click, choose \u0026ldquo;Create Empty\u0026rdquo;). Call this \u0026ldquo;GameManager\u0026rdquo;.\nAdd a script called GameManager to it.\nThe game manager will keep track of the score, and have a reference to the score display so it can update the display when the score changes. There is a method called ScoreIncrease() which can be called by other objects to change the score. This is what our asteroids will use.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 using System.Collections; using System.Collections.Generic; using UnityEngine; using UnityEngine.UI; public class GameManager : MonoBehaviour { public int score; public TMPro.TextMeshProUGUI scoreField; // Start is called before the first frame update void Start() { score = 0; } // Update is called once per frame void Update() { } public void ScoreIncrease(int n) { score += n; scoreField.text = \u0026#34;Destroyed: \u0026#34;+score; } } Refresh your assets, and drag a reference to the score display to the field in the GameManager object.\nIn your Asteroid script, we need to add a reference to the GameManager, and call the ScoreIncrease() method each time an asteroid is destroyed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { public GameObject debrisTemplate; private float initializationTime; private GameManager gm; // Start is called before the first frame update void Start() { // ... initializationTime = Time.timeSinceLevelLoad; gm = GameObject.Find(\u0026#34;GameManager\u0026#34;).GetComponent\u0026lt;GameManager\u0026gt;(); } // ... void OnTriggerEnter2D(Collider2D other) { if( Time.timeSinceLevelLoad - initializationTime \u0026lt; 0.5 ){ return; } if( other.gameObject.CompareTag(\u0026#34;LaserBlast\u0026#34;) ){ gm.ScoreIncrease(1); if( debrisTemplate != null){ // ... } } } "},{"id":26,"href":"/dit9b/pyToCs/types/","title":"Explicit typing","parent":"From Python to C-sharp","content":"Computers store all information as sequences of numbers, and different kinds of information are encoded using different methods. These different kinds of information are known as types, and they exist in all programming languages.\nThe Python interpreter allows the programmer to ignore many of the issues of typing much of the time, as it can infer a lot from the code. But you would have had to convert numbers into text using the str() function, and this is an example of type conversion.\nC# requires you to be a lot more explicit about the types of variables and their conversion, so you\u0026rsquo;ll get a lot more exposure to the idea of types.\nCommon types int Integers are whole numbers, positive or negative. They are a fixed number of digits long, so there is a maximum and minimum value you can store in one.\nfloat/double Floating point is the most common way to store decimals; it stores them in scientific notation. There are a certain number of digits for the exponent, and a certain number for the mantissa. The fixed number of digits means there are values that can\u0026rsquo;t be stored, so the computer will round to the nearest valid value. Floats are usually 32-bits (32 binary digits long), and doubles are, as their name might suggest, 64-bits long. This gives doubles much more room for extra digits, meaning far less likelihood of drifting and errors due to rounding.\nchar/strings Any time input is read in from the keyboard, or text output to the screen, strings of characters are involved. A single entity, like \u0026lsquo;a\u0026rsquo;, \u0026lsquo;%\u0026rsquo; or \u0026lsquo;3\u0026rsquo; are characters, and are indicated with single quotes. Multiple characters together are known as strings, and are represented with double quotes.\nNote that Python doesn\u0026rsquo;t really distinguish between characters and strings, and uses single and double quotes interchangeably. This is not the case in C#.\nbool Booleans are true/false values. The conditions in if and while loops must have boolean values; that is, they evaluate either to true or false.\nIn Python, the keywords are True/False, with a capital letter. In C#, they are true/false, without one.\n"},{"id":27,"href":"/dit9b/pyToCs/","title":"From Python to C-sharp","parent":"9 Digital Tech","content":""},{"id":28,"href":"/dit9b/basics/playerMovement/","title":"Player movement","parent":"Ex 1: Alien rescue","content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { public float accel; private Rigidbody2D rb; // Start is called before the first frame update void Start() { rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); } // Update is called once per frame void Update() { float inX = Input.GetAxis(\u0026#34;Horizontal\u0026#34;); float inY = Input.GetAxis(\u0026#34;Vertical\u0026#34;); Vector2 direction = new Vector2(inX, inY); rb.AddForce(direction * accel); } } "},{"id":29,"href":"/dit9b/pyToCs/if/","title":"if statements","parent":"From Python to C-sharp","content":" Link to view video at TMC\nBasic if Python if condition: statements regularFlow C# if( condition ){ statements; } regularFlow; if/else Python if condition: statements else: statements regularFlow C# if( condition ){ statements; }else{ statements; } regularFlow; chained if Python if condition: statements elif otherCondition: statements else: statements regularFlow C# if( condition ){ statements; }else if( otherCondition ){ statements; }else{ statements; } regularFlow; "},{"id":30,"href":"/dit9b/pyToCs/while/","title":"while loops","parent":"From Python to C-sharp","content":" Link to view video at TMC\nPython while condition: statements regularFlow C# while( condition ){ statements; } regularFlow; "},{"id":31,"href":"/dit9b/pyToCs/for/","title":"for loops","parent":"From Python to C-sharp","content":" Link to view video at TMC\nPython In Python, the range() function is commonly used to make a loop that counts through some number:\nrange(4) will give the numbers 0, 1, 2, 3 (i.e. 0 to not-quite 4); range(1,4) will give the numbers 1, 2, 3 (i.e. 1 to not-quite 4); range(1,4,2) will give the numbers 1, 3 (i.e. 1 to not-quite 4, increasing by 2). C# C# inherits its truly disgusting for loop layout from C. It is basically a slight rejigging of what you\u0026rsquo;d write if you were going to write a for loop using a while loop.\nHere is a basic for loop, written using a while loop:\nint i=0; while( i\u0026lt;4 ){ Console.WriteLine(i); i++; } Note that i++ is a shortcut for i = i + 1.\nHere is the equivalent written as a \u0026lsquo;proper\u0026rsquo; for loop:\nfor( int i=0; i\u0026lt;4; i++ ){ Console.WriteLine(i); } The setup part of the for loop has three mini statements. The first sets up the counter. The second is the loop condition (it will loop while this statement is true). The third is the step to perform at the end of each loop to prepare for the next run of the loop.\nHere are two examples of equivalent Python and C# loops, and their resulting output.\nPython 1 for i in range(4): print(i) C# 1 for( int i=0; i\u0026lt;4; i++ ){ Console.WriteLine(i); } Output 1 0 1 2 3 Python 2 for i in range(3, 10, 2): print(i) C# 2 for( int i=3; i\u0026lt;10; i=i+2 ){ Console.WriteLine(i); } Output 2 3 5 7 9 "},{"id":32,"href":"/dit9b/deepSpace/XXsnippets/","title":"Other snippets","parent":"Ex 2: Deep Space","content":""},{"id":33,"href":"/dit9b/deepSpace/assets/","title":"Assets","parent":"Ex 2: Deep Space","content":"Alt-click to download:\nExplosion 1 Explosion 2 "},{"id":34,"href":"/dit9b/reference/","title":"Reference","parent":"9 Digital Tech","content":" Tutorials Python If you are new to Python, or need a quick refresher, here is a good interactive guide you can use:\nAposteriori: Introduction to Python The \u0026ldquo;official\u0026rdquo; Python tutorial, which is bigger, longer, and more thorough:\nThe Python Tutorial Bottle The official Bottle tutorial\nBottle Tutorial A series of YouTube videos on various aspects of Bottle. Some are quite short, a couple are very long:\nBottle Tutorials Documentation Python Python Standard Library (ver 3.9) Bottle Bottle: Python Web Framework Random Zetcode bottle guide "},{"id":35,"href":"/dit9b/glossary/","title":"Glossary","parent":"9 Digital Tech","content":""},{"id":36,"href":"/dit9b/deepSpace/finishedScripts/","title":"Finished scripts","parent":"Ex 2: Deep Space","content":""},{"id":37,"href":"/dit9b/pyToCs/example/","title":"Example","parent":"From Python to C-sharp","content":""},{"id":38,"href":"/dit9b/assessment/progCheckpoint/","title":"1: Programming Checkpoints","parent":"Assessment Tasks","content":" Hand in your files here. You will need to save each of the tasks in this set in its own file, with a simple naming system:\n1. Three in, three out should be in a file named ex1.cs, 2. Name swapper should be in a file named ex2.cs and so on.\nYou will be submitting these files to a system which will mark them automatically. Since they\u0026rsquo;ll be marked by a computer, and computers are terminally stupid, you will need to make sure that your files are labelled correctly, or the computer will assume you haven\u0026rsquo;t done that particular exercise. You will also need to make sure your output exactly matches the examples, down to capitalisation, spelling, line breaks and spaces.\n"},{"id":39,"href":"/dit9b/assessment/deepSpace/","title":"2. Deep Space Game","parent":"Assessment Tasks","content":""},{"id":40,"href":"/dit9b/assessment/planning/","title":"3: 2D Game Design Project","parent":"Assessment Tasks","content":""},{"id":41,"href":"/dit9b/","title":"9 Digital Tech","parent":"","content":"Welcome to 9 Digital Tech (Sem 2)!\nThis semester length subject focusses on 2D game design using Unity.\nIt also introduces you to a new language (C#), and allows you to compare the features and advantages of C# and Python.\n"},{"id":42,"href":"/dit9b/deepSpace/finishedScripts/asteroid/","title":"Asteroid.cs","parent":"Finished scripts","content":"using System.Collections; using System.Collections.Generic; using UnityEngine; public class Asteroid : MonoBehaviour { public GameObject explosionTemplate; // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } void OnTriggerEnter2D(Collider2D other) { if( other.gameObject.CompareTag(\u0026#34;rockKiller\u0026#34;) ){ GameObject explosion = Instantiate(explosionTemplate, transform.position, transform.rotation) as GameObject; Destroy(other.gameObject); Destroy(this.gameObject); } } } "},{"id":43,"href":"/dit9b/categories/","title":"Categories","parent":"9 Digital Tech","content":""},{"id":44,"href":"/dit9b/deepSpace/XXsnippets/sceneChange/","title":"Changing scenes","parent":"Other snippets","content":"At the top of any script which calls scene changes, you will need to add:\nusing UnityEngine.SceneManagement; At the point in your script where you want to change scenes, add the line:\nSceneManager.LoadScene(level); Replace level either with the name of the scene (a string) or the number of the scene from File \u0026gt; Build Settings (an int).\n"},{"id":45,"href":"/dit9b/glossary/components/","title":"Components","parent":"Glossary","content":"All game objects have one or more components.\nHere are the ones you\u0026rsquo;re most likely to encounter.\nName This is not actually a component, but it lives at the top of the inspector panel, above all the components. Here you can give your object a meaningful name as well as attach a tag, which is useful for identifying things during collisions.\nTransform All GameObjects have a transform component, which manages the position, rotation and scale of the object in the scene.\nSprite Renderer Most game objects will appear on the screen in the form of some kind of image. The sprite renderer handles drawing that image. You can disable the sprite renderer by unchecking the box by the title. This is useful if you need an invisible object for some reason.\nRigidbody2D 2D vs 3D: There is a Rigidbody2D for 2D games, and a Rigidbody for 3D games. Make sure you have the right one! The Rigidbody component makes the object available to the physics engine. This means it will be affected by gravity, if your game has gravity enabled, and it can have forces applied to it. (You will mostly have a collider attached to any object with a Rigidbody as well.)\nCollider2D 2D vs 3D: There is are types of Collider2D for 2D games, and types of Collider for 3D games. Make sure you have the right one! There are several of colliders of different shapes and complexities, of which the BoxCollider2D is the simplest (others you might use are CircleCollider2D, CapsuleCollider2D and PolygonCollider2D). Colliders are responsible for determining when objects start and end colliding with other objects. If two colliders overlap, there is a collision. Note that a collision between two objects will only be registered if both objects have collider components.\nYou can modify the size/shape of the collider to better match your sprite by clicking the button next to Edit Collider.\nWhen a collision begins (i.e. colliders start to overlap) the method:\nvoid OnCollisionEnter2D(Collision other) will be called, and when the collision ends, the method:\nvoid OnCollisionExit2D(Collision other) will be called, if they exist in a script attached to the object. You only need to define those methods if you want to do something particular in your game. If your objects also have Rigidbody components, the physics of the collision will be handled automatically by the physics engine.\nIf you need an object to respond when something passes over it, but you don\u0026rsquo;t want it to get in the way (think of the start/finish line on a top-down racing game), select the Is trigger option in the object\u0026rsquo;s collider, and now object won\u0026rsquo;t cause collisions. Instead of any OnCollision methods being called, these methods will be called:\nvoid OnTriggerEnter2D(Collider2D other) and\nvoid OnTriggerExit2D(Collider2D other) "},{"id":46,"href":"/dit9b/basics/","title":"Ex 1: Alien rescue","parent":"9 Digital Tech","content":""},{"id":47,"href":"/dit9b/deepSpace/","title":"Ex 2: Deep Space","parent":"9 Digital Tech","content":""},{"id":48,"href":"/dit9b/glossary/hierarchy/","title":"Hierarchy","parent":"Glossary","content":"\n"},{"id":49,"href":"/dit9b/setup/installation/","title":"Installation","parent":"Setting up for Unity","content":"You will need three main tools for developing in Unity, and all can be found on the TMC Company Portal.\nUnity Hub Unity Hub is responsible for managing licences and which version of Unity (if you have more than one) is associated with which project. You will start your workflow in Unity Hub, where you will select which project you\u0026rsquo;ll work on, or start a new one.\nUnity Unity (also referred to as the Unity Editor) is the heart of things. As it is regularly updated, you might eventually find yourself with more than one version. Because we won\u0026rsquo;t be doing anything terribly adventurous, it probably won\u0026rsquo;t matter which version you have.\nVisual Studio Code When you need to edit code files in Unity, it will open up Visual Studio Code, and you\u0026rsquo;ll edit them in that.\n"},{"id":50,"href":"/dit9b/deepSpace/finishedScripts/laserBlast/","title":"LaserBlast.cs","parent":"Finished scripts","content":"using System.Collections; using System.Collections.Generic; using UnityEngine; public class LaserBlast : MonoBehaviour { // Start is called before the first frame update void Start() { } // Update is called once per frame void Update() { //Handle screen wrapping int margin = 50; Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); if( screenPos.x \u0026gt; Screen.width+margin || screenPos.x \u0026lt; -margin || screenPos.y \u0026gt; Screen.height+margin || screenPos.y \u0026lt; -margin ){ Destroy(this); } Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); } } "},{"id":51,"href":"/dit9b/deepSpace/finishedScripts/player/","title":"Player.cs","parent":"Finished scripts","content":"using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { public float rotSpeed; public float linSpeed; private Rigidbody2D rb; public GameObject projectileTemplate; // Start is called before the first frame update void Start() { rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); } // Update is called once per frame void Update() { //Update rotation rb.MoveRotation(rb.rotation - Input.GetAxis(\u0026#34;Horizontal\u0026#34;) * rotSpeed * Time.deltaTime); //Update velocity Vector3 pos = transform.position; float y = Input.GetAxis(\u0026#34;Vertical\u0026#34;) * linSpeed * Time.deltaTime; Vector2 vChange = new Vector2(0, y); vChange = transform.rotation * vChange; rb.velocity += vChange; //Handle screen wrapping int margin = 50; //Work out our screen position Vector2 screenPos = Camera.main.WorldToScreenPoint(transform.position); //Check if we\u0026#39;ve moved too far offscreen if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; }else if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; }else if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } //Work out our new world position Vector3 newPos = Camera.main.ScreenToWorldPoint(screenPos); transform.position = new Vector2(newPos.x, newPos.y); //Handle fire button if( Input.GetButtonDown(\u0026#34;Fire1\u0026#34;) ){ GameObject gun1 = GameObject.Find(\u0026#34;gun1\u0026#34;); GameObject blast = Instantiate(projectileTemplate, gun1.transform.position, gun1.transform.rotation) as GameObject; blast.GetComponent\u0026lt;Rigidbody2D\u0026gt;().AddRelativeForce(new Vector2(0, 800)); } } } "},{"id":52,"href":"/dit9b/deepSpace/finishedScripts/rock/","title":"rock.cs","parent":"Finished scripts","content":"using System.Collections; using System.Collections.Generic; using UnityEngine; public class Rock : MonoBehaviour { private Rigidbody2D rb; public GameObject explosionTemplate; public GameObject debrisTemplate; private float initializationTime; // Start is called before the first frame update void Start() { rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); initializationTime = Time.timeSinceLevelLoad; //Choose a random angle float angle = Random.Range(0f, 360f); this.transform.rotation = Quaternion.Euler(0, 0, angle); //Choose a random speed float speed = Random.Range(0f, 5f); Vector3 s = new Vector3(0, speed, 0); rb.velocity = transform.rotation * s; } // Update is called once per frame void Update() { int margin = 50; Vector2 screenPos = Camera.main.WorldToScreenPoint(this.transform.position); if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left screenPos.x = -margin; } if( screenPos.x \u0026lt; -margin ){ //off left, move to right screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off bottom, move to top screenPos.y = -margin; } if( screenPos.y \u0026lt; -margin ){ //off top, move to bottom screenPos.y = Screen.height+margin; } Vector3 newWorldPosition = Camera.main.ScreenToWorldPoint(screenPos); this.transform.position = new Vector2(newWorldPosition.x, newWorldPosition.y); } public void OnCollisionEnter2D(Collision2D other) { if( Time.timeSinceLevelLoad - initializationTime \u0026lt; 0.5 ){ return; } if( other.gameObject.CompareTag(\u0026#34;Rock\u0026#34;) || other.gameObject.CompareTag(\u0026#34;LaserBlast\u0026#34;) ){ this.gameObject.SetActive(false); Destroy(this.gameObject); GameObject explosion = Instantiate(explosionTemplate, this.transform.position, this.transform.rotation) as GameObject; if( debrisTemplate != null){ // \u0026#34;!=\u0026#34; = \u0026#34;!\u0026#34; + \u0026#34;=\u0026#34; float angle = Random.Range(30f, 150f); float speed = Random.Range(5f, 10f); Vector3 s = new Vector3(0, speed, 0); GameObject a = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation * Quaternion.Euler(0, 0, angle)) as GameObject; a.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = a.transform.rotation * s; GameObject b = Instantiate(debrisTemplate, this.transform.position, this.transform.rotation * Quaternion.Euler(0, 0, -angle)) as GameObject; b.GetComponent\u0026lt;Rigidbody2D\u0026gt;().velocity = b.transform.rotation * s; } } } } "},{"id":53,"href":"/dit9b/setup/","title":"Setting up for Unity","parent":"9 Digital Tech","content":""},{"id":54,"href":"/dit9b/tags/","title":"Tags","parent":"9 Digital Tech","content":""},{"id":55,"href":"/dit9b/basics/videos/","title":"Walkthrough videos","parent":"Ex 1: Alien rescue","content":"Here is a series of short videos which will get you started building 2D games in Unity.\nStarting a project\nUnity Hub starting a new project Adding objects and making them interact\nadding objects sprites Rigidbody2D colliders User input; complex objects, and lots of them\nresponding to user input compound objects prefabs constraints Collecting objects\ntagging objects collisions "}]