<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>From Python to C-sharp on TMC - 9 Digital Tech Semester 2</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/</link><description>Recent content in From Python to C-sharp on TMC - 9 Digital Tech Semester 2</description><generator>Hugo</generator><language>en-au</language><atom:link href="https://tmcdigitech.github.io/dit9b/pyToCs/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic input and output</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/inputOutput/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/inputOutput/</guid><description>Output Python print(&amp;#34;Some text&amp;#34;) C# Console.WriteLine(&amp;#34;Some text&amp;#34;) To print to the console in Python, we use the print() function. In C#, console functions are part of the Console class, and the equivalent to Python&amp;rsquo;s print function is Console.WriteLine(). If you don&amp;rsquo;t want it to automatically add a line break, you can use the Console.Write() function.
Input Python response = input(&amp;#34;What is your name? &amp;#34;) C# Console.WriteLine(&amp;#34;What is your name? &amp;#34;) response = Console.</description></item><item><title>Explicit typing</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/types/</guid><description>Computers store all information as sequences of numbers, and different kinds of information are encoded using different methods. These different kinds of information are known as types, and they exist in all programming languages.
The Python interpreter allows the programmer to ignore many of the issues of typing much of the time, as it can infer a lot from the code. But you would have had to convert numbers into text using the str() function, and this is an example of type conversion.</description></item><item><title>if statements</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/if/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/if/</guid><description> Link to view video at TMC
Basic if Python if condition: statements regularFlow C# if( condition ){ statements; } regularFlow; if/else Python if condition: statements else: statements regularFlow C# if( condition ){ statements; }else{ statements; } regularFlow; chained if Python if condition: statements elif otherCondition: statements else: statements regularFlow C# if( condition ){ statements; }else if( otherCondition ){ statements; }else{ statements; } regularFlow;</description></item><item><title>while loops</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/while/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/while/</guid><description> Link to view video at TMC
Python while condition: statements regularFlow C# while( condition ){ statements; } regularFlow;</description></item><item><title>for loops</title><link>https://tmcdigitech.github.io/dit9b/pyToCs/for/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/for/</guid><description>Link to view video at TMC
Python In Python, the range() function is commonly used to make a loop that counts through some number:
range(4) will give the numbers 0, 1, 2, 3 (i.e. 0 to not-quite 4); range(1,4) will give the numbers 1, 2, 3 (i.e. 1 to not-quite 4); range(1,4,2) will give the numbers 1, 3 (i.e. 1 to not-quite 4, increasing by 2). C# C# inherits its truly disgusting for loop layout from C.</description></item><item><title/><link>https://tmcdigitech.github.io/dit9b/pyToCs/example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tmcdigitech.github.io/dit9b/pyToCs/example/</guid><description/></item></channel></rss>